{
    "version": "https://jsonfeed.org/version/1",
    "title": "0基础 学IT 进大厂 拿高薪",
    "subtitle": "就来黑马程序员",
    "icon": "https://promisemey.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://promisemey.github.io",
    "items": [
        {
            "id": "https://promisemey.github.io/2022/11/02/ajax-md/",
            "url": "https://promisemey.github.io/2022/11/02/ajax-md/",
            "title": "ajax.md",
            "date_published": "2022-11-02T13:28:34.000Z",
            "content_html": "<h2 id=\"readystate-属性用来表示当前-ajax-请求状态\"><a class=\"anchor\" href=\"#readystate-属性用来表示当前-ajax-请求状态\">#</a> readyState 属性用来表示当前 ajax 请求状态</h2>\n<p>0 xhr 对象已经创建，尚未调用 open 方法<br />\n 1 open () 方法以备调用<br />\n 2 send () 调用，响应头也已被接收<br />\n 3 数据接收中，response 属性中已经包含部分数据<br />\n 4 ajax 请求完成</p>\n<h2 id=\"状态码-status\"><a class=\"anchor\" href=\"#状态码-status\">#</a> 状态码 status</h2>\n<h2 id=\"2-成功\"><a class=\"anchor\" href=\"#2-成功\">#</a> 2** 成功</h2>\n<ol>\n<li>200 请求成功 get post</li>\n<li>201 已创建。成功请求创建了资源 post put</li>\n</ol>\n<h2 id=\"3-重定向\"><a class=\"anchor\" href=\"#3-重定向\">#</a> 3** 重定向</h2>\n<ol>\n<li>301 永久移动 请求的资源被永久移动到新的 url</li>\n<li>302 临时移动 类似 301 但资源只是临时移动 客户端继续使用原有 url</li>\n<li>304 未修改 不返回任何资源，客户端通常会访问缓存资源</li>\n</ol>\n<h2 id=\"4-客户端错误\"><a class=\"anchor\" href=\"#4-客户端错误\">#</a> 4** 客户端错误</h2>\n<ol>\n<li>404 网页不存在</li>\n<li>400 请求错误</li>\n<li>401 当前请求需要用户验证</li>\n<li>403 服务器拒绝访问</li>\n<li>408 请求超时</li>\n</ol>\n<h2 id=\"5-服务器错误\"><a class=\"anchor\" href=\"#5-服务器错误\">#</a> 5** 服务器错误</h2>\n<ol>\n<li>500</li>\n<li>501 服务器不支持请求方法</li>\n<li>503 超载或系统维护</li>\n</ol>\n<h2 id=\"编码解码\"><a class=\"anchor\" href=\"#编码解码\">#</a> 编码解码、</h2>\n<h2 id=\"encodeuri-decodeuri\"><a class=\"anchor\" href=\"#encodeuri-decodeuri\">#</a> encodeURI() decodeURI()</h2>\n<h1 id=\"http-请求消息组成\"><a class=\"anchor\" href=\"#http-请求消息组成\">#</a> http 请求消息组成</h1>\n<h2 id=\"请求行空格隔开\"><a class=\"anchor\" href=\"#请求行空格隔开\">#</a> 请求行 (空格隔开)</h2>\n<ol>\n<li>请求方式</li>\n<li>url</li>\n<li>http 协议版本</li>\n</ol>\n<h2 id=\"请求头部键值对\"><a class=\"anchor\" href=\"#请求头部键值对\">#</a> 请求头部 (键值对)</h2>\n<ol>\n<li>用来描述<strong>客户端的基本信息</strong>，把客户端的相关信息告知服务器</li>\n<li>User-Agent 浏览器类型</li>\n<li>Content-Type 发送到服务器的数据格式</li>\n<li>accpet 描述客户端能够接收什么类型的返回内容</li>\n<li>accpet-language 描述客户端期望接收那种文本类型</li>\n</ol>\n<h2 id=\"空行\"><a class=\"anchor\" href=\"#空行\">#</a> 空行</h2>\n<h2 id=\"请求体只有-post-请求才有请求体\"><a class=\"anchor\" href=\"#请求体只有-post-请求才有请求体\">#</a> 请求体 (只有 post 请求才有请求体)</h2>\n<h1 id=\"响应消息\"><a class=\"anchor\" href=\"#响应消息\">#</a> 响应消息</h1>\n<h2 id=\"状态行\"><a class=\"anchor\" href=\"#状态行\">#</a> 状态行</h2>\n<ol>\n<li>协议版本</li>\n<li>状态码</li>\n<li>状态码描述</li>\n</ol>\n<h2 id=\"响应头部\"><a class=\"anchor\" href=\"#响应头部\">#</a> 响应头部</h2>\n<h2 id=\"空行-2\"><a class=\"anchor\" href=\"#空行-2\">#</a> 空行</h2>\n<h2 id=\"响应体\"><a class=\"anchor\" href=\"#响应体\">#</a> 响应体</h2>\n<h1 id=\"状态码\"><a class=\"anchor\" href=\"#状态码\">#</a> 状态码</h1>\n<h2 id=\"2-成功-2\"><a class=\"anchor\" href=\"#2-成功-2\">#</a> 2** 成功</h2>\n<ol>\n<li>200 请求成功 get post</li>\n<li>201 已创建。成功请求创建了资源 post put</li>\n</ol>\n<h2 id=\"3-重定向-2\"><a class=\"anchor\" href=\"#3-重定向-2\">#</a> 3** 重定向</h2>\n<ol>\n<li>301 永久移动 请求的资源被永久移动到新的 url</li>\n<li>302 临时移动 类似 301 但资源只是临时移动 客户端继续使用原有 url</li>\n<li>304 未修改 不返回任何资源，客户端通常会访问缓存资源</li>\n</ol>\n<h2 id=\"4-客户端错误-2\"><a class=\"anchor\" href=\"#4-客户端错误-2\">#</a> 4** 客户端错误</h2>\n<ol>\n<li>404 网页不存在</li>\n<li>400 请求错误</li>\n<li>401 当前请求需要用户验证</li>\n<li>403 服务器拒绝访问</li>\n<li>408 请求超时</li>\n</ol>\n<h2 id=\"5-服务器错误-2\"><a class=\"anchor\" href=\"#5-服务器错误-2\">#</a> 5** 服务器错误</h2>\n<ol>\n<li>500</li>\n<li>501 服务器不支持请求方法</li>\n<li>503 超载或系统维护</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://promisemey.github.io/2022/10/25/JavaScript/week3/",
            "url": "https://promisemey.github.io/2022/10/25/JavaScript/week3/",
            "title": "Dom操作",
            "date_published": "2022-10-25T00:29:40.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://promisemey.github.io/2022/10/17/JavaScript/week2/",
            "url": "https://promisemey.github.io/2022/10/17/JavaScript/week2/",
            "title": "JavaScriptWeek2",
            "date_published": "2022-10-17T07:09:11.000Z",
            "content_html": "<p>[JavaScript, js 基础 week2]</p>\n<h1 id=\"数组方法\"><a class=\"anchor\" href=\"#数组方法\">#</a> 数组方法</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> numArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">545</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">326</span><span class=\"token punctuation\">,</span> <span class=\"token number\">423</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 添加 push ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1. 向数组尾部添加一个或多个数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 3. 返回值：最新数组长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值：'</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//pop ()  删除</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 1. 删除数组尾部的一个数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 3. 返回值：被删除的数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pop()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值'</span> <span class=\"token operator\">+</span> result1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//unshift () 添加</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 1. 向数组最前面添加一个或多个数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 3. 返回值：最新数组长度</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unshift()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值：'</span> <span class=\"token operator\">+</span> result2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//shift () 删除</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 1. 删除数组最前的一个数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 3. 返回值：被删除的数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shift()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'返回值'</span> <span class=\"token operator\">+</span> result3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//sort () 排序</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 1. 按照 第一位 asic 码大小排序</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 3. 返回值：排序后的数组</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sort()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">let</span> result4 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------自定义排序方法-------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">152</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">let</span> resetResult <span class=\"token operator\">=</span> newArr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resetResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">//reverse () 反转</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 1. 将原数组内容进行反转</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 2. 原数组会被改变</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 3. 返回值：反转后的数组</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reverse()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">let</span> result5 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// concat</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 1. 拼接数组</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">// 2. 原数组不会改变</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">// 3. 返回值：返回拼接后的数组</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'peach'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fruits()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">let</span> result6 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span> <span class=\"token string\">'math'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">// slice()</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">// 1. 截取数组</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 2. 不改变原数组</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">// 3. 返回值：返回截取的数据</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 4. 参数</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">//    // 参数一：开始位置索引</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">//    // 参数二：结束位置索引，不包括此位置</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">//          // 负值  最后一位 -1</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slice()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">let</span> result7 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result7<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">// splice()</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 1. 删除指定元素，可以替换</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">// 2. 改变原数组</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">// 3. 返回值：更新后的数组</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'splice()方法'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------原-----------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------原-----------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">let</span> result8 <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"字符串方法\"><a class=\"anchor\" href=\"#字符串方法\">#</a> 字符串方法</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello world!!!'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//charAt (索引)    返回在指定索引位置的字符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'l'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'o'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//charCodeAt (索引)     返回在指定的位置的字符的 Unicode 编码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 108</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//indexOf (字符串，index)    返回某个指定的字符串值在字符串中首次出现的位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 第一个参数为字符串值，如存在返回下标，不存在返回 - 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 第二个参数为索引 (可忽略不写)，表示从字符串开始查找的索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//lastIndexOf (字符串，index)    返回某个指定的字符串值在字符串中最后出现的位置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 第一个参数为字符串值，如存在返回下标，不存在返回 - 1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 第二个参数为索引 (可忽略不写)，表示从字符串结束搜索的索引</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'My naME is DashuaIGE'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//toUpperCase ()    把字符串中的字母全部转化为大写</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'MY NAME IS DASHUAIGE'</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//oLowerCase ()     把字符串中的字母全部转化为小写</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'my name is dashuaige'</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//substr (开始索引，个数)     从起始索引位置提取字符串中指定个数的字符 -- 截取字符串</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 第一个参数为开始提取字符串的索引 (包含此索引位置)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 第二个参数为所需要提取字符串的长度（可忽略不写，则从索引开始提取到字符串结束）</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'aME is DashuaIGE'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'E is'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//substring (开始索引，结束索引)     提取字符串中两个指定的索引号之间的字符 -- 截取字符串</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 第一个参数为开始提取字符串的索引 (包含此索引位置)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 第二个参数为结束提取字符串的索引 (不包含此索引位置)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// （第二个参数可忽略不写，则从索引开始提取到字符串结束）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ME is DashuaIGE'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'ME is'</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">var</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">'nimen xiwang taoge yizhidanshen daolao ma'</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//split ()      通过指定字符分隔字符串，返回数组 --- 字符串 转 数组</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 如果 不传参 就会将整字符串当做 数组的一项值 返回</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['nimen xiwang taoge yizhidanshen daolao ma']</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 如果 传入一个空字符串 就会将 字符串的每一个字符 当做 数组中的每一项元素 返回</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// ['n', 'i', 'm', 'e', 'n', ' ', 'x', 'i', 'w', 'a', 'n', 'g', ' ', 't', 'a', 'o', 'g', 'e', ' ', 'y', 'i', 'z', 'h', 'i', 'd', 'a', 'n', 's', 'h', 'e', 'n', ' ', 'd', 'a', 'o', 'l', 'a', 'o', ' ', 'm', 'a']</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 如果 传入一个 空格字符串 就会把 字符串中的 空格 作为 分割数组的 分割符</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['nimen', 'xiwang', 'taoge', 'yizhidanshen', 'daolao', 'ma']</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 只要 传入一个 非空字符串 就会 把这个非空字符串 作为 分隔符 用来 分割字符串为数组</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['nimen xiw', 'ng t', 'oge yizhid', 'nshen d', 'ol', 'o m', '']</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">//repeat (num)   复制字符串指定次数，并将它们连接在一起返回</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 'nimen xiwang taoge yizhidanshen daolao manimen xiwang taoge yizhidanshen daolao manimen xiwang taoge yizhidanshen daolao manimen xiwang taoge yizhidanshen daolao ma'</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">var</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">'涛哥真帅，涛哥怎么那个帅呢，难道是因为涛哥烫头了吗'</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">//replace (' 被替换的字符 ',' 替换的字符 ')  替换字符串</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//var e = str4.replace (' 涛哥 ',' 军哥 ');</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">//console.log (e);  // 军哥真帅，涛哥怎么那个帅呢，难道是因为涛哥烫头了吗</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'涛哥'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    str4 <span class=\"token operator\">=</span> str4<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'涛哥'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'军哥'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  n<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">var</span> str5 <span class=\"token operator\">=</span> <span class=\"token string\">'   afjka fjsadfj faskldfj     '</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">//trim ()   会从一个字符串的两端删除空白字符。</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">var</span> sss <span class=\"token operator\">=</span> str5<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sss<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'afjka fjsadfj faskldfj'</span></pre></td></tr></table></figure><h1 id=\"window-浏览器对象模型\"><a class=\"anchor\" href=\"#window-浏览器对象模型\">#</a> window 浏览器对象模型</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>navigator location document history screen</pre></td></tr></table></figure><h2 id=\"widow\"><a class=\"anchor\" href=\"#widow\">#</a> widow</h2>\n<h2 id=\"location\"><a class=\"anchor\" href=\"#location\">#</a> location</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性和方法</th>\n<th>描述</th>\n<th>用法</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">href</td>\n<td>指定地址</td>\n<td><code>location.href = &quot;htttps://www.baidu.com&quot;</code></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">search</td>\n<td>地址栏地址 <code>?</code>  后面的</td>\n<td><code>location.search</code></td>\n<td><code>'?ie=UTF-8&amp;wd=%E8%8F%9C%E9%B8%9F'</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hash</td>\n<td>地址栏地址 <code>#</code> 后面的</td>\n<td><code>location.hash</code></td>\n<td><code>'#/my/'</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reload</td>\n<td>刷新   <code>location.reload(true)</code>  强制刷新     类似  &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;F5&lt;/kbd&gt;</td>\n<td><code>location.reload()</code></td>\n<td>刷新页面，参数为 <code>true</code>  时，强制刷新</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"history\"><a class=\"anchor\" href=\"#history\">#</a> history</h2>\n<table>\n<thead>\n<tr>\n<th>属性和方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>back</td>\n<td>后退</td>\n</tr>\n<tr>\n<td>forward</td>\n<td>前进</td>\n</tr>\n<tr>\n<td>go</td>\n<td>-1 后退，1 前进</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "JavaScript",
                "js基础week2",
                "js基础"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/13/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://promisemey.github.io/2022/10/13/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Html面试题",
            "date_published": "2022-10-13T01:22:02.000Z",
            "content_html": "<h1 id=\"html5-新特性\"><a class=\"anchor\" href=\"#html5-新特性\">#</a> html5 新特性</h1>\n<blockquote>\n<ul>\n<li><code>canvas、svg</code>  绘图特性</li>\n<li><code>Geolocation</code>  地理定位</li>\n<li><code>header、section、footer、nav、button、artical、aside</code>  语义化标签</li>\n<li><code>audio.video</code>  音视标签</li>\n<li><code>localstorage</code>  本地离线存储，长期保存，关闭浏览器不消失</li>\n<li><code>sessionStorage</code>  <strong>回话存储</strong>用户关闭浏览器窗口后删除</li>\n<li><code>drop and drop</code>  拖放 API</li>\n<li><code>date、url、color、email、number、search</code>  表单控件</li>\n<li>新技术  <code>web worker</code> 、 <code>web socker</code></li>\n</ul>\n</blockquote>\n<h1 id=\"css-基本选择器\"><a class=\"anchor\" href=\"#css-基本选择器\">#</a>  <code>css</code>  基本选择器</h1>\n<blockquote>\n<p>类选择器（class）、标签选择器、ID 选择器</p>\n<ul>\n<li>\n<p>​ 权重</p>\n<p>!important &gt; 内联样式（非选择器）&gt;ID 选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器（*）</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"清除浮动\"><a class=\"anchor\" href=\"#清除浮动\">#</a> 清除浮动</h1>\n<h1 id=\"重排和重绘作用\"><a class=\"anchor\" href=\"#重排和重绘作用\">#</a> 重排和重绘？作用</h1>\n<blockquote>\n<p>重排：当文档的变化影响了元素的几何信息 (元素的位置和尺寸大小), 浏览器会重新计算这个元素的几何属性，将其放在正确的位置，这个过程就叫重排<br />\n重绘：重绘跳过了创建布局树和分层的过程</p>\n</blockquote>\n",
            "tags": [
                "interview",
                "html面试题",
                "html面试题"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/08/JavaScript/javascript%E5%9F%BA%E7%A1%80/",
            "url": "https://promisemey.github.io/2022/10/08/JavaScript/javascript%E5%9F%BA%E7%A1%80/",
            "title": "Javascript基础",
            "date_published": "2022-10-08T02:11:02.000Z",
            "content_html": "<h1 id=\"javascript-基础week-1\"><a class=\"anchor\" href=\"#javascript-基础week-1\">#</a> JavaScript 基础 (week 1)</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<blockquote>\n<p>JavaScript（简称 “JS”） 是一种具有函数优先的轻量级、弱类型，解释型或即时编译型的编程语言。</p>\n</blockquote>\n<blockquote>\n<p>** 注：** 脚本语言</p>\n<ul>\n<li>无需编译</li>\n<li>直接执行，需要依赖于浏览器执行</li>\n<li>无法独立执行</li>\n</ul>\n</blockquote>\n<h2 id=\"web-组成部分\"><a class=\"anchor\" href=\"#web-组成部分\">#</a> web 组成部分</h2>\n<ol>\n<li>结构 html 网页组成的结构</li>\n<li>表现 css 作用于页面的美化</li>\n<li>行为 JavaScript 页面的交互效果</li>\n</ol>\n<h2 id=\"javascript-的组成\"><a class=\"anchor\" href=\"#javascript-的组成\">#</a> JavaScript 的组成</h2>\n<blockquote>\n<p>ECMAScript + BOM + DOM</p>\n</blockquote>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ECMAscript  js基础语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOM  浏览器对象模型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DOM  文档对象模型</pre></td></tr></table></figure><h1 id=\"体验\"><a class=\"anchor\" href=\"#体验\">#</a> 体验</h1>\n<h2 id=\"javascript-的引用\"><a class=\"anchor\" href=\"#javascript-的引用\">#</a> JavaScript 的引用</h2>\n<ol>\n<li>\n<p>内部引用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 内部引用 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'内部引用js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>外部引用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 外部引用 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"../js/index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>内联</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 内联引用 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">&lt;</span>div onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('内联引用js')\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"javascript:console.log('a标签的特殊引用');\"</span><span class=\"token operator\">></span>内联引用<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"javascript-常用的输入输出语法\"><a class=\"anchor\" href=\"#javascript-常用的输入输出语法\">#</a> JavaScript 常用的输入输出语法</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输入输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 浏览器弹窗</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'浏览器弹出'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 网页中输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是一条&lt;b>加粗&lt;/b>语句'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 控制台输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'控制台打印'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 浏览器弹窗输入</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//str 接收弹窗输入的内容</span></pre></td></tr></table></figure><h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<ol>\n<li><code>// </code>  单行注释</li>\n<li><code> /* */</code>  多行注释</li>\n</ol>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<ol>\n<li><strong>变量：</strong> 保存数据的容器</li>\n<li>声明： <code>var let const</code></li>\n<li>规范：字母，数字，下划线，和 $ 符号组成，<strong>不能以数字开头</strong></li>\n<li>关键字：</li>\n<li>保留字：\n<ul>\n<li>top delete this new</li>\n</ul>\n</li>\n<li>驼峰命名</li>\n</ol>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h3>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>number        整数，浮点型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string        字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>boolean       布尔</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>undefined     未定义</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>null          空</pre></td></tr></table></figure><h3 id=\"引用数据类型\"><a class=\"anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h3>\n<ol>\n<li>对象  <code>object</code></li>\n<li>函数  <code>function</code></li>\n</ol>\n<h3 id=\"数据类型的判断\"><a class=\"anchor\" href=\"#数据类型的判断\">#</a> 数据类型的判断</h3>\n<blockquote>\n<p><code>typeof</code>  用来检测数据类型</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//str 接收弹窗输入的内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// typeof(str)   'string'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 确定   string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 弹窗点击取消   object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// object</span></pre></td></tr></table></figure><blockquote>\n<p><strong>注意：</strong></p>\n<ul>\n<li><code>typeof()</code>  是一个函数</li>\n<li><code>typeof</code>  是一个运算符</li>\n</ul>\n</blockquote>\n<h2 id=\"nan\"><a class=\"anchor\" href=\"#nan\">#</a> NaN</h2>\n<blockquote>\n<p>not a number (不是一个数字)</p>\n</blockquote>\n<ul>\n<li>\n<p>在 js 语言中表示的是数字的一种不正常的状态，</p>\n</li>\n<li>\n<p>一般在计算出错的时候出现</p>\n</li>\n<li>\n<p><code>NaN</code>  数据类型为 <code>number</code></p>\n<blockquote>\n<p><strong>注意:</strong> NaN 与任何值都不相等，<strong>包括自身</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"检测-nan\"><a class=\"anchor\" href=\"#检测-nan\">#</a> 检测 NaN</h3>\n<p><code>isNaN()</code></p>\n<ul>\n<li><code>true</code>  表示被检测的参数为 NaN</li>\n<li><code>false</code>  表示被检测的参数为正常数字</li>\n</ul>\n<h3 id=\"数据类型练习题\"><a class=\"anchor\" href=\"#数据类型练习题\">#</a> 数据类型练习题</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'str'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> udf <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> nl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr></table></figure><ol>\n<li class=\"quiz true\">\n<p><code>num - str</code>  得到的结果是 <code>NaN</code> </p>\n</li>\n<li class=\"quiz multi options\">\n<p>根据上方代码块所示，选择正确答案：</p>\n<p>下列那些表达式的结果是 <code>NaN</code> ?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>console.log(str - udf)</code> </li>\n<li><code>console.log(str + num)</code></li>\n<li class=\"correct\"><code>console.log(num - str)</code> </li>\n<li><code>console.log(str + udf)</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>\n<p>✔️ NaN</p>\n</li>\n<li>\n<p>❌  <code>str1</code>  string 类型</p>\n</li>\n<li>\n<p>✔️ NaN</p>\n</li>\n<li>\n<p>❌  <code>strundefined</code>  string 类型</p>\n<p></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>根据上方代码块所示，选择正确答案，下列那些表达式的结果是 <code>NaN</code> <span class=\"gap\"></span>?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>console.log(str - udf)</code> </li>\n<li><code>console.log(str + num)</code></li>\n<li><code>num - str</code></li>\n<li><code>console.log(str + udf)</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<blockquote>\n<p>在程序中运算符的作用是非常强大的而且也是必须的，对运算符的合理使用可以让我们的程序变得更加灵动，精准。</p>\n</blockquote>\n<ul>\n<li>本章学习的运算符如下：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">算术运算符</td>\n<td style=\"text-align:left\">+ , - , * , / , %</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">赋值运算符</td>\n<td style=\"text-align:left\">= , += , -+ , *= , /= , %=</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">比较 (关系) 运算符</td>\n<td style=\"text-align:left\">&gt; , &lt; , &gt;= , &lt;= , == , === , != , !==</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">逻辑运算符</td>\n<td style=\"text-align:left\">&amp;&amp; ， ll ， ！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自增自减 (一元) 运算符</td>\n<td style=\"text-align:left\">num++ ， ++num ， num-- , --num</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">三元 (条件) 运算符</td>\n<td style=\"text-align:left\">条件 ？ 表达式 1 ： 表达式 2</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h3>\n<ul>\n<li>比较运算符： <code>&gt; &lt; &gt;= &lt;= == === != !==</code></li>\n</ul>\n<blockquote>\n<p>比较运算符返回的结果为 <strong>boolean</strong> 即 <code>true/false</code></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">>=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token string\">'10'</span> <span class=\"token comment\">//true 等值判断，只判断值，不判断数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">===</span> <span class=\"token string\">'10'</span> <span class=\"token comment\">//false 全等判断，值和数据类型都会判断</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'10'</span> <span class=\"token comment\">//false 不等值判断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'10'</span> <span class=\"token comment\">//true 不全等判断</span></pre></td></tr></table></figure><h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<ul>\n<li><code>&amp;&amp; || !</code></li>\n</ul>\n<ol>\n<li>\n<p>逻辑或  <code>||</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// &amp;&amp;  同时判断多个表达式，必须是所有的表达式结果都是 true 才会得到 true，否则结果为 false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// true &amp;&amp; true     true</span></pre></td></tr></table></figure></li>\n<li>\n<p>逻辑与  <code>&amp;&amp;</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ||  同时判断多个表达式，只要至少有一个表达式的结果都是 true 得到的结果就为 true，否则结果为 false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// false || false    false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// true || false    true</span></pre></td></tr></table></figure></li>\n<li>\n<p>逻辑非  <code>!</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// !  逻辑非表示对结果的否定，进行取反的操作，本身是 true 的会变成 false，本身是 false 的会变成 true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// !true       false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// !false      true</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p><strong>注意：</strong> 逻辑或 和 逻辑与会产生逻辑<strong>中断</strong></p>\n</blockquote>\n<h3 id=\"一元运算符\"><a class=\"anchor\" href=\"#一元运算符\">#</a> 一元运算符</h3>\n<blockquote>\n<p><code>i++ ++i i-- --i</code>  自增自减</p>\n</blockquote>\n<h4 id=\"i-与-i-的区别\"><a class=\"anchor\" href=\"#i-与-i-的区别\">#</a> <ins>i 与 i</ins> 的区别？</h4>\n<blockquote>\n<p><code>i++:</code>  先执行，后自增</p>\n<p><code>++i:</code>  先自增，后执行</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 计算一下结果，并分析步骤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> num<span class=\"token operator\">--</span> <span class=\"token operator\">-</span> <span class=\"token operator\">--</span>num <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span> <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> num<span class=\"token operator\">++</span> <span class=\"token operator\">-</span> <span class=\"token operator\">--</span>num <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> num<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 21</span></pre></td></tr></table></figure><p><strong>鼠标选中显示答案：</strong><span class=\"spoiler bulr\" title=\"你知道得太多了\">21 - 19 + 19 + 19 + 19 - 19 + 20 + 20=80</span></p>\n<h1 id=\"数据类型转换\"><a class=\"anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h1>\n<blockquote>\n<p>在程序的运行过程中变量的值是很容易发生改变的，而在值进行变化的时候它的数据类型也很容易发生改变，我们把这种数据类型的变化叫做：<strong>数据类型转换</strong>。</p>\n</blockquote>\n<h2 id=\"显式转换\"><a class=\"anchor\" href=\"#显式转换\">#</a> 显式转换</h2>\n<blockquote>\n<p>转换为：<strong>string</strong></p>\n<p>转换为：<strong>number</strong></p>\n<p>转换为：<strong>boolean</strong></p>\n</blockquote>\n<h3 id=\"转换为字符串类型\"><a class=\"anchor\" href=\"#转换为字符串类型\">#</a> 转换为字符串类型</h3>\n<blockquote>\n<p><code>String()</code>  将需要被转换的内容放入小括号内部即可</p>\n<p><code>.toString()</code>  要转换的变量 <strong>调用</strong> 此方法将数据类型转换为<strong> string</strong>，变量不能是空值（null）并且也不能是 undefined</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// String () 函数可以将任何数据转换为 string 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '10'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'NaN'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'null'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'undefined'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'true'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//toString () 函数可以将除了 null/undefined 之外的任何数据转换为 string 类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '10'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'true'</span></pre></td></tr></table></figure><h3 id=\"转换为-number\"><a class=\"anchor\" href=\"#转换为-number\">#</a> 转换为 number</h3>\n<ul>\n<li>Number()\n<ul>\n<li>如果内容可以转换成数字，则返回对应的数字（整数或小数）</li>\n<li>如果内容不可以转换成数字，则返回 NaN</li>\n<li>如果内容为空，则返回 0</li>\n</ul>\n</li>\n<li>parseInt()\n<ul>\n<li>将内容转换成整数（直接去掉小数）</li>\n<li>从第一位开始检查，数字直接转换，直到第一个不是数字的内容就去掉</li>\n<li>第一位就不是数字的，直接转换为 NaN</li>\n<li>不认识小数点，最终的结果只会是整数</li>\n</ul>\n</li>\n<li>parseFloat()\n<ul>\n<li>将内容转换成小数</li>\n<li>从第一位开始检查，数字直接转换，可以认识一次小数点，直到第一个不是数字的内容就去掉</li>\n<li>第一位就不是数字的，直接转换为 NaN</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：parseInt 和 parseFloat 解析会从第一字符进行解析，直到遇到不能被解析的字符为止，返回已经被解析的内容。</p>\n</blockquote>\n<h3 id=\"转换为boolean\"><a class=\"anchor\" href=\"#转换为boolean\">#</a> <strong>转换为：boolean</strong></h3>\n<blockquote>\n<p>将得到的数据转换为 number 类型我们可以使用：</p>\n</blockquote>\n<ul>\n<li>Boolean()\n<ul>\n<li>false、0、NaN、Undefined、null、空字符串 会被转换成 false</li>\n<li>其它的都会被转成 true（任何非空字符串都会被转换为 true）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：Boolean 值在内存中 true 为 1，false 为 0</p>\n</blockquote>\n<h2 id=\"隐式转换\"><a class=\"anchor\" href=\"#隐式转换\">#</a> 隐式转换</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 隐式数据类型转换 --- 自动数据类型转换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 转换成 string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// +   字符串和任何类型的数据相加，都是在进行字符串拼接，得到的结果都是 string 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '234'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abctrue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '11false'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'null'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------华丽的分割线--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 转换成 number</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// +  -  *  /  %  >  &lt;  >=  &lt;=  ==  !=  ++ --  -=  *=  /=  %=</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// -  *  /  %</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">/</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">%</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">-</span> <span class=\"token string\">'123abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">-</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span> <span class=\"token operator\">*</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 36</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// +</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 对于 非字符串的 值 可以正常进行 隐式类型转换</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 但是对于字符串 不能正常转换，如果希望通过 + 号将字符串转换成 number 类型</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 需要在 在 字符串前 单独使用一个 + 号 实现</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '55'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// >  &lt;  >=  &lt;=  ==  !=</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">></span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'33'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// ++ --  -=  *=  /=  %=</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>n<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token string\">'23'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>m <span class=\"token operator\">*=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 69</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------华丽的分割线--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 转换成 boolean</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// !</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h3 id=\"逻辑中断\"><a class=\"anchor\" href=\"#逻辑中断\">#</a> 逻辑中断</h3>\n<blockquote>\n<p><code>&amp;&amp; 和 ||</code>  在特定的情况下会产生逻辑中断</p>\n</blockquote>\n<ul>\n<li>\n<p><code>&amp;&amp; and</code>  的逻辑中断</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// &amp;&amp; 的 逻辑短路 (中断)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果 第一个表达式 结果为 false 就直接终止，不会去执行第二个表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 第一个表达式 结果为 true 才会去 执行第二个表达式，由第二个表达式确定结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// f    t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>|| 或</code> 的逻辑中断</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// || 的 逻辑短路 (中断)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果 第一个表达式 结果为 true 就直接终止，不会去执行第二个表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 第一个表达式 结果为 false 才会去 执行第二个表达式，由第二个表达式确定结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> aa <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  t    f</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"分支语句\"><a class=\"anchor\" href=\"#分支语句\">#</a> 分支语句</h1>\n<h2 id=\"单双分支语句\"><a class=\"anchor\" href=\"#单双分支语句\">#</a> 单双分支语句</h2>\n<blockquote>\n<p>if 语句会先判断一个条件表达式的布尔值，然后根据该值决定是否执行某些特点的语句</p>\n</blockquote>\n<h3 id=\"单分支语法\"><a class=\"anchor\" href=\"#单分支语法\">#</a> 单分支语法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单分支语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//if (判断条件表达式 - 结果为布尔值)&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//     判断条件结果成立 (true) 时，执行的代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 简写：如果 判断条件成立后 执行的代码 只有一句代码 可以 写成下面的方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 省略花括号，将 执行的代码 和 if 语句 写在一行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//if (判断条件表达式 - 结果为布尔值) 判断条件结果成立 (true) 时，执行的代码；</span></pre></td></tr></table></figure><h3 id=\"双分支语法\"><a class=\"anchor\" href=\"#双分支语法\">#</a> 双分支语法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 双分支语句的语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//if (判断条件表达式 - 结果为布尔值)&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//     判断条件结果成立 (true) 时，执行的代码；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// &#125;else&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//     判断条件结果不成立 (false) 时，执行的代码；</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 注： 如果 判断条件表达式结果成立 (true) 执行 if 后花括号中的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//      如果 判断条件表达式结果不成立 (false) 执行 else 后花括号中的代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 输入一个数字，判断这个数字是奇数还是偶数，弹出警告框说明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个数字'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">+</span> <span class=\"token string\">'是偶数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num2 <span class=\"token operator\">+</span> <span class=\"token string\">'是奇数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"switch分支语句\"><a class=\"anchor\" href=\"#switch分支语句\">#</a>  <code>switch</code>  分支语句</h2>\n<blockquote>\n<ul>\n<li>首先 判断的值 与 case 值 1 进行 全等比较，如果成立 (true)，就执行对应 case 下的代码，</li>\n<li>如果不成立 继续用 判断的值 与 下一个 case 值做全等比较，如果成立 (true)，就执行对应 case 下的代码，</li>\n<li>如果不成立 继续下一个，如果 所有 case 值 都和 判断的值 不全等，则执行 defalut 下的代码</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//switch 分支语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//switch 分支语句 在判断的时候 进行的是 全等判断</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 就是 判断的值 和 case 值 必须 数据类型和值都要 相等 才算 成立，否则就是不成立</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 语法：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>判断的值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> 值<span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        值<span class=\"token number\">1</span> 与 判断的值 全等时 执行的代码语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> 值<span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        值<span class=\"token number\">2</span> 与 判断的值 全等时 执行的代码语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">case</span> 值<span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        值<span class=\"token number\">3</span> 与 判断的值 全等时 执行的代码语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        以上 <span class=\"token keyword\">case</span>的值 都和 判断的值 不全等，最终执行 <span class=\"token keyword\">default</span>下的代码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 注意：在 switch 分支语句中 break 语句 是必须的，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 如果不存在 break 语句 会发生 switch 穿透 (case 穿透)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//switch 穿透是指当 switch 语句中某一个 case 被匹配到并且该 case 下的语句会被执行，</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 当 case 部分逻辑执行完毕之后如果没有 break 的话就会一直往下一个 case 匹配。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 也就是说在 switch 语句中当 case 被匹配到，程序只有遇到 break 才会跳出 switch。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 否则就会一直向下执行代码，直到 witch 语句的结束</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 其实在某些情况下 可以利用 switch 穿透 (case 穿透) 实现 一些 效果，代码书写会更加方便</span></pre></td></tr></table></figure><blockquote>\n<p><strong>注意：</strong> 在 switch 分支语句中 break 语句 是必须的，如果<strong>不存在</strong> break 语句 会发生 switch<strong> 穿透</strong> (case 穿透)</p>\n<p>当 case 部分逻辑执行完毕之后如果没有 break 的话就会一直往下一个 case 匹配。</p>\n<ul>\n<li>其实在某些情况下 可以利用 switch 穿透 (case 穿透) 实现 一些 效果，代码书写会更加方便</li>\n</ul>\n</blockquote>\n<h2 id=\"if-和-switch的区别\"><a class=\"anchor\" href=\"#if-和-switch的区别\">#</a>  <code>if 和 switch</code>  的区别？</h2>\n<blockquote>\n<ul>\n<li>\n<p>if 分支语句 适合做 区间判断 (范围判断)，但是同时也可以做 等值判断 (固定值判断)</p>\n</li>\n<li>\n<p>switch 分支语句 适合做 <strong>等值判断</strong> (固定值判断)，其实也可以做 区间判断 (范围判断)，但是不推荐</p>\n</li>\n<li>\n<p>switch 分支语句 进行的是 <strong>全等</strong>判断</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"三目运算符\"><a class=\"anchor\" href=\"#三目运算符\">#</a> 三目运算符</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">条件表达式？成立</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">不成立</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num2<span class=\"token operator\">+</span><span class=\"token string\">'是偶数'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num2<span class=\"token operator\">+</span><span class=\"token string\">'是奇数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 结果为 true   执行 alert (num2+' 是偶数 ')</span></pre></td></tr></table></figure><h1 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h1>\n<h2 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a>  <code>while</code>  循环</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 循环的形式很多，但是任何一种循环都少不了一下四个部分：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1、初始化循环变量：通常作为条件出现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2、循环的判断条件：循环是否执行的依据，也是循环是否停止的依据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 3、循环体：重复执行的部分</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 4、更新循环变量：防止循环成为死循环，和跳出 (停止) 循环体的重要组成部分</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//while 循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//while (循环的判断条件 -- 结果为 true 会进入花括号执行代码)&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//     循环体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 1、初始化循环变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 2、循环的判断条件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 3、循环体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我想买房，我想买车，我想结婚---我是王某涛&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 4、更新循环变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  n<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//while 循环的执行流程：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 1 ==》2 ==》3 ==》4 ==》2 ==》3 ==》4 ==》2 ==》...... ==》2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 说明：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 初始化循环变量 只有在代码开始时 执行一次，后续不会在执行</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 接下来就会 判断循环条件，</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就进入 花括号执行，</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 当 循环变量更新后 会 再次 来执行 判断循环条件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就进入 花括号执行，</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr></table></figure><h2 id=\"dowhile循环\"><a class=\"anchor\" href=\"#dowhile循环\">#</a>  <code>do...while</code>  循环</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 循环的形式很多，但是任何一种循环都少不了一下四个部分：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1、初始化循环变量：通常作为条件出现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2、循环的判断条件：循环是否执行的依据，也是循环是否停止的依据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 3、循环体：重复执行的部分</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 4、更新循环变量：防止循环成为死循环，和跳出 (停止) 循环体的重要组成部分</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//do...while 循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// do&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//     循环体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// &#125; while (循环的判断条件 -- 结果为 true 会进入花括号执行代码)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 1、初始化循环变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 3、循环体</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我想买房，我想买车，我想结婚---我是王某涛&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 4、更新循环变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  n<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2、循环的判断条件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//do...while 循环的执行流程：</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 1 ==》3 ==》4 ==》2 ==》3 ==》4 ==》...... ==》2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 说明：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 初始化循环变量 只有在代码开始时 执行一次，后续不会在执行</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 接下来就会 执行 循环体 和 更新循环变量</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 然后才 进行 循环条件的判断</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就 继续 执行 循环体 和 更新循环变量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 当 循环变量更新后 会 再次 来执行 判断循环条件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就进入 花括号执行，</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//while 循环 和 do...while 循环 的区别</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 在 初始化的循环变量 符合 循环条件时 没有什么 却别</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 但是 在 初始化的循环变量 不符合 循环条件时</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//while 循环 直接停止，一次 也不会执行</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//do...while 循环 会 至少执行一次</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 注：</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//while 循环 先判断，再执行</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//do...while 循环 先执行，再判断</span></pre></td></tr></table></figure><h2 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a>  <code>for</code>  循环</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 循环的形式很多，但是任何一种循环都少不了一下四个部分：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1、初始化循环变量：通常作为条件出现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2、循环的判断条件：循环是否执行的依据，也是循环是否停止的依据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 3、循环体：重复执行的部分</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 4、更新循环变量：防止循环成为死循环，和跳出 (停止) 循环体的重要组成部分</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//for 循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//for (1、初始化循环变量；2、循环的判断条件；4、更新循环变量)&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//     3、循环体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// (1、初始化循环变量；2、循环的判断条件；4、更新循环变量)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 3、循环体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我想买房，我想买车，我想结婚---我是王某涛&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//for 循环的执行流程：</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 1 ==》2 ==》3 ==》4 ==》2 ==》3 ==》4 ==》2 ==》...... ==》2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 说明：</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 初始化循环变量 只有在代码开始时 执行一次，后续不会在执行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 接下来就会 判断循环条件，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就进入 花括号执行，</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 当 循环变量更新后 会 再次 来执行 判断循环条件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 如果结果为 true，就进入 花括号执行，</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 如果结果为 false，就 停止循环</span></pre></td></tr></table></figure><h2 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别？</h2>\n<blockquote>\n<ul>\n<li>\n<p>while、do...while 和 for 循环的区别</p>\n</li>\n<li>\n<p>while 与 for 循环 和 do...while 循环 的区别？</p>\n</li>\n<li>\n<p>当条件为 false 时，while 循环 和 for 循环 一次都不会执行，先判断再执行</p>\n</li>\n<li>\n<p>当条件为 false 时，do...while 至少会执行一次，先执行再判断</p>\n</li>\n<li>\n<p>while 和 for 循环体的区别？</p>\n</li>\n<li>\n<p>循环次数确定的情况，通常选用 for 循环</p>\n</li>\n<li>\n<p>循环次数不确定的情况，通常选用 while 循环</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"breank-continue\"><a class=\"anchor\" href=\"#breank-continue\">#</a>  <code>breank   continue</code></h2>\n<blockquote>\n<ul>\n<li><code>break</code>   跳出循环</li>\n<li><code>continue</code>   结束本次循环 ，开始下次循环</li>\n</ul>\n</blockquote>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"声明式函数\"><a class=\"anchor\" href=\"#声明式函数\">#</a> 声明式函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明式函数 --- 普通函数 (有名函数)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 函数体 --- 函数被调用后需要执行的代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 调用 声明式函数 --- 通过 函数名 () 实现 函数的调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 声明式函数 可以在 任意位置调用，在函数 定义前 和 定义后 都可以 调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"匿名函数\"><a class=\"anchor\" href=\"#匿名函数\">#</a> 匿名函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 赋值式函数 --- 匿名函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 所谓的赋值式函数 其实就是将 函数赋值给 变量保存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//var 变量 = function ()&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//     // 函数体 --- 函数被调用后需要执行的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wuli涛涛'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 调用 赋值式函数 --- 通过 变量名 () 实现 函数的调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 赋值式函数 只能在 函数被定义后 调用，在定义之前是无法调用的</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"函数参数\"><a class=\"anchor\" href=\"#函数参数\">#</a> 函数参数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JS 语言中函数拥有四个非常重要的特性，它们分别是：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token comment\">// 函数名 (语法要求)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// 函数体 (函数体缺失那么该函数就是无意义的)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token comment\">//- 形参</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">//- 实参</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 返回值 (语法要求)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 函数的参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 形参 --- 形式参数，形参其实就是一个变量，这个变量的值是函数调用是传入的实参</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 实参 --- 实际参数，就是一个值，这个值最终会 赋值给 函数的形参</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 注：在调用函数是 给函数传入的实参，就相当于在给这个函数的形参 赋值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 一个函数可以传入多个参数，在这种情况下，函数的形参 和 实参 是一一对相应</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 第一个实参是给 第一个形参 赋值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\">// 第二个实参是给 第二个形参 赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">// ......</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//function 函数名 (形参)&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 函数名 (实参)</span></pre></td></tr></table></figure><h1 id=\"变量提升\"><a class=\"anchor\" href=\"#变量提升\">#</a> 变量提升</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ƒ fn2 ()&#123;console.log ('fn2 函数 ');&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// var num;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// var fn1;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// fn1();  // TypeError: fn1 is not a function</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ƒ fn2 ()&#123;console.log ('fn2 函数 ');&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// JS 运行的代码分为         </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 预编译：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 浏览器帮我们做，所做的事情就是基本的语法检查，除了给我们报错时，看不见摸不着</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 预解析：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 也是浏览器做，虽然已经能够看得见了，对</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 我们程序中使用 var 和 function 定义的变量和函数进行预解析工作。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 执行代码：</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 从上往下执行，逐行          </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 当执行函数时才会进入函数内部        </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 再次逐行执行代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 变量和函数的提升是发生在 预解析阶段的，JS 语言中所有的变量名和函数名都会被执行提升操作</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//js 对 变量的提升</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 会将 所有用 var 声明变量提升到当前作用域的最顶端，</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 但是 只针对 声明部分进行提升，对变量的赋值部分是不提升的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 所以我们在 变量声明之前访问变量得到的结果是 undefined</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 只有在代码执行到给变量赋值后，才能访问到这个变量的值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 101</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//js 对 函数的提升</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 对 声明是函数的提升 是将整个函数都赋值给函数名，完全将 整个函数都 提升到 该作用域下的最顶端</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 所以 可以在 任意位置调用函数，因为函数永远是在 一开始就被定义了，任何位置都可以访问到函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn2函数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript",
                "js基础week1",
                "js基础"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/Git/git/",
            "url": "https://promisemey.github.io/2022/10/06/Git/git/",
            "title": "Git的基本操作",
            "date_published": "2022-10-06T06:18:45.000Z",
            "content_html": "<h1 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> GIT</h1>\n<h2 id=\"一-git特性\"><a class=\"anchor\" href=\"#一-git特性\">#</a> 一、git 特性</h2>\n<ol>\n<li>\n<p>直接记录快照，而非差异比较</p>\n<ul>\n<li>git 快照：在原有文件版本的基础之上重新生成一份新的文件 (备份)</li>\n<li>效率：未做修改的文件则不会重新存储，而是保留一个链接指向之前存储的文件</li>\n</ul>\n<blockquote>\n<p><strong>缺点：</strong> 占用磁盘空间较大</p>\n<p><strong>优点：</strong> 版本切换时非常快，因为每个版本都是完整的文件快照</p>\n</blockquote>\n</li>\n<li>\n<p>近乎所有操作都是本地执行</p>\n<blockquote>\n<p><strong>特性：</strong></p>\n<ol>\n<li>\n<p>断网后依旧可以在本地进行版本控制</p>\n</li>\n<li>\n<p>联网后，将本地记录同步到云端服务器即可</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"二-git中的三个区域\"><a class=\"anchor\" href=\"#二-git中的三个区域\">#</a> 二、git 中的三个区域</h2>\n<ol>\n<li>工作区</li>\n<li>暂存区</li>\n<li>git 仓库</li>\n</ol>\n<h2 id=\"三-三种状态\"><a class=\"anchor\" href=\"#三-三种状态\">#</a> 三、三种状态</h2>\n<ol>\n<li>已修改 (modified)\n<ul>\n<li>表示已经修改了文件，但是还没有将修改结果放入暂存区</li>\n</ul>\n</li>\n<li>已暂存 (staged)\n<ul>\n<li>表示对已修改文件的当前版本做了标记，使之包含于下次提交的列表中</li>\n</ul>\n</li>\n<li>已提交 (committed)\n<ul>\n<li>表示当前文件已经保存在本地的 git 仓库中</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"四-配置\"><a class=\"anchor\" href=\"#四-配置\">#</a> 四、配置</h2>\n<h3 id=\"1-配置用户信息\"><a class=\"anchor\" href=\"#1-配置用户信息\">#</a> 1. 配置用户信息</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配置用户名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"用户名\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 配置用户邮箱地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email “邮箱”</pre></td></tr></table></figure><h3 id=\"2-git的全局配置文件\"><a class=\"anchor\" href=\"#2-git的全局配置文件\">#</a> 2. Git 的全局配置文件</h3>\n<ul>\n<li>文件地址：<span class=\"exturl\" data-url=\"YzovdXNlcnMvJUU3JTk0JUE4JUU2JTg4JUI3JUU1JTkwJThELy5naXRjb25maWc=\">git 全局配置文件</span></li>\n</ul>\n<h3 id=\"3检查配置信息\"><a class=\"anchor\" href=\"#3检查配置信息\">#</a> 3. 检查配置信息</h3>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看所有的全局配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config --list --global</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看指定的全局配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git config user.name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>git config user.email</pre></td></tr></table></figure><h3 id=\"4帮助信息\"><a class=\"anchor\" href=\"#4帮助信息\">#</a> 4. 帮助信息</h3>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看 config 的帮助信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git help config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 终端展示</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git config -h</pre></td></tr></table></figure><h2 id=\"五-git基本操作\"><a class=\"anchor\" href=\"#五-git基本操作\">#</a> 五、GIT 基本操作</h2>\n<h3 id=\"1获取git仓库的两种方式\"><a class=\"anchor\" href=\"#1获取git仓库的两种方式\">#</a> 1. 获取 Git 仓库的两种方式</h3>\n<ul>\n<li>将未进行版本版本控制的本地目录转换为 Git 仓库</li>\n<li>从其他服务器克隆一个已经存在的 Git 仓库</li>\n</ul>\n<h3 id=\"2初始化仓库\"><a class=\"anchor\" href=\"#2初始化仓库\">#</a> 2. 初始化仓库</h3>\n<ul>\n<li>在当前文件夹下右键点击 <code>Git bash</code></li>\n<li>输入 <code>git init</code>  初始化仓库</li>\n</ul>\n<h3 id=\"3检查文件状态\"><a class=\"anchor\" href=\"#3检查文件状态\">#</a> 3. 检查文件状态</h3>\n<blockquote>\n<p>文件状态</p>\n<ol>\n<li>Untracked files （未被跟踪的）</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2022/10/06/x1YkHU.png\" alt=\"未跟踪\" /></p>\n<ol start=\"2\">\n<li>Changes to be committed（已被跟踪，并处于暂存状态）</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2022/10/06/x1YiuV.png\" alt=\"暂存状态\" /></p>\n<ol start=\"3\">\n<li>modified（文件已被修改，暂未放入暂存区）</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2022/10/06/x1YFBT.png\" alt=\"已修改\" /></p>\n<ol start=\"3\">\n<li>double  modified</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2022/10/06/x1YVN4.png\" alt=\"再次修改\" /></p>\n</blockquote>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 查看文件处于什么状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git status</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 精简模式  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git status -s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>git status --short</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>??  代表未被跟踪</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2. 跟踪新文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>git add 文件名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>A  代表已被跟踪，并处于暂存状态</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 3. 提交文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>git commit -m \"新建了....\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 4. 修改文件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>M(红色)  文件已修改，但未被放入暂存区</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>M(绿色)  文件已修改，且已放入暂存区</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>M(绿色)M(红色)  放入暂存区后，文件再次修改，并且为放入暂存区</pre></td></tr></table></figure><h3 id=\"4基础命令\"><a class=\"anchor\" href=\"#4基础命令\">#</a> 4. 基础命令</h3>\n<ol>\n<li>\n<p>撤销修改</p>\n<ul>\n<li><code>git checkout -- 目标文件</code></li>\n</ul>\n</li>\n<li>\n<p>添加多个</p>\n<ul>\n<li><code>git add .</code></li>\n</ul>\n</li>\n<li>\n<p>移除暂存区中的文件</p>\n<ul>\n<li><code>git reset HEAD 目标文件</code></li>\n<li><code>git reset HEAD .</code>  移除所有暂存区中文件</li>\n</ul>\n</li>\n<li>\n<p>跳过使用暂存区</p>\n<ul>\n<li><code>git commit -a -m &quot;描述信息&quot;</code></li>\n<li>自动把所有跟踪过的文件暂存起来一并提交</li>\n</ul>\n</li>\n<li>\n<p>移除文件</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 仓库和工作区同时移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git rm -f 目标文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 只移除仓库中的文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git rm --cached 目标文件</pre></td></tr></table></figure></li>\n<li>\n<p>忽略文件</p>\n<ul>\n<li><code>.gitignore</code></li>\n</ul>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 规范</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 开头是注释</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/ 结尾是目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/ 开头防止递归</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>! 开头表示取反</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>glob模式</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2022/10/06/x1YZ4J.png\" alt=\"x1YZ4J.png\" /></p>\n</li>\n<li>\n<p>查看提交历史</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 时间先后所有提交历史，最近的在上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git log</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 展示 n 条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git log -n</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 一行上面显示最近 2 条</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>git log -2 --pretty=oneline</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 自定义输出格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># % h 提交的简写哈希值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># % an 作者名字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># % ar 作者修订日期</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># % s 提交说明</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>git log -2 --pretty=format:\"%h | %an | %ar | %s\"</pre></td></tr></table></figure></li>\n<li>\n<p>会退到指定版本</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 一行打印所有提交历史</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git log  --pretty=oneline</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 git reset --hard 命令，根据指定的 id 回退指定版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git reset --hard &lt;commitID></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 旧版本中使用 reflog  查看历史</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>git reflog --pretty=oneline</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 切换版本</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>git reset --hard &lt;commitID></pre></td></tr></table></figure></li>\n<li>\n<p>克隆项目</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 克隆远程项目</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git clone 仓库地址</pre></td></tr></table></figure></li>\n<li>\n<p>分支</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.master 主分支</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>作用: 用来保存和记录整个项目已完成的功能代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2.功能分支</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3.查看分支列表</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>git branch</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>4.创建分支</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>git branch 名字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>5.切换分支</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>git checkout 分支名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>6.快速创建并切换</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># -b 表示创建一个新分支</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>git checkout -b 分支名称</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>7.合并分支</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"切换到master分支\"><a class=\"anchor\" href=\"#切换到master分支\">#</a> 切换到 master 分支</h1>\n<pre><code>git checkout master\n# 将代码合并到master分支\ngit merge login\n8.删除分支\ngit branch -d 分支名称\n9.不同分支对同一文件做出修改，产生合并冲突\n手动解决，重新提交\n```\n\n![合并冲突](https://s1.ax1x.com/2022/10/06/x1YEEF.png)](https://imgse.com/i/x1YEEF)\n</code></pre>\n<ol start=\"11\">\n<li>\n<p>推送</p>\n<pre><code class=\"language-ng\">第一次将本地分支推送到远程仓库\n# -u 表示把本地分支和远程分支进行关联\n# 只有第一次推送需要带 -u 参数\ngit push -u 远程仓库别名 本地分支名称:远程分支名称\n如果希望本地分支和远程分支名称保持一致\ngit push -u origin 名称\n查看远程仓库所有分支信息\ngit remote show origin\n\n# 将远程仓库下载到本地仓库\ngit checkout 远程分支名称\n# 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名\ngit checkout -b 本地分支名称 远程仓库/远程分支\ngit checkout -b master origin/main\n\n# 拉取远程分支最新代码\ngit pull\n\n# 删除远程分支\ngit push 远程仓库名 --delete 远程分支名\n\n# 查看远程分支\ngit branch -r\ngit branch -a\n\n# 从远程获取代码库\ngit fetch\n</code></pre>\n<blockquote>\n<p><strong>git remote add origin ssh</strong> 链接远程仓库</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "Git",
                "Git的基本使用",
                "Git"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/HTML/%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E5%8F%8A%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/",
            "url": "https://promisemey.github.io/2022/10/06/HTML/%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E5%8F%8A%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/",
            "title": "字体文件",
            "date_published": "2022-10-06T06:09:42.000Z",
            "content_html": "<h2 id=\"自定义字体文件\"><a class=\"anchor\" href=\"#自定义字体文件\">#</a> 自定义字体文件</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/* 引入自定义字体 */       </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@font-face &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    font-family: fof;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    src: url(../font/方正流行体_GBK.TTF);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    font-family: fof;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id=\"多列布局\"><a class=\"anchor\" href=\"#多列布局\">#</a> 多列布局</h2>\n<blockquote>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token comment\">/* 分为几列 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">/* column-count: 3; */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">/* 列与列之间的边距 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">/* 列与列之间的边框 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">/* column-rule: 2px solid pink; */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">/* 列宽 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">column-width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">/* all 全部列 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">/* column-span: all; */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p><code>break-inside: avoid;</code>  解决多列布局内容盒子中断问题</p>\n</blockquote>\n<h2 id=\"ifarme\"><a class=\"anchor\" href=\"#ifarme\">#</a> ifarme</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./03字体.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>字体<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./04ali.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>阿里<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./05多列布局.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>多列布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./06多列布局2.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>瀑布流<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663760885063.png\" alt=\"1663760885063\" /></p>\n<h2 id=\"bfc\"><a class=\"anchor\" href=\"#bfc\">#</a> BFC</h2>\n<blockquote>\n<p><strong>定义:</strong> 块级格式化上下文，页面里一块独立渲染的区域，有自己独立的渲染规则</p>\n</blockquote>\n<h2 id=\"多媒体资源\"><a class=\"anchor\" href=\"#多媒体资源\">#</a> 多媒体资源</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    controls 控件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    muted 静音</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    loop 循环</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    poster 封面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    autoplay 自动播放</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span> <span class=\"token attr-name\">muted</span> <span class=\"token attr-name\">loop</span> <span class=\"token attr-name\">poster</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../img/86.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 资源兼容 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../video/3theA.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- &lt;source src=\"../video/\" type=\"video/webm\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &lt;source src=\"../video/\" type=\"video/ogg\"> --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../music/a.mp3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio/mp3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- &lt;source src=\"../music/a.ogg\" type=\"audioogg\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &lt;source src=\"../music/a.wav\" type=\"audio/wav\"> --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "html"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/HTML/%E9%80%89%E6%8B%A9%E5%99%A8/",
            "url": "https://promisemey.github.io/2022/10/06/HTML/%E9%80%89%E6%8B%A9%E5%99%A8/",
            "title": "选择器",
            "date_published": "2022-10-06T06:07:32.000Z",
            "content_html": "<h1 id=\"一-层级选择器\"><a class=\"anchor\" href=\"#一-层级选择器\">#</a> 一、层级选择器</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>e>f 选择e元素下的所有第一层f元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e+f 选择e元素后面的第一个兄弟f元素(中间间隔其他元素不生效)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e~f 选择e元素后面的所有兄弟f元素</pre></td></tr></table></figure><h1 id=\"二-属性选择器\"><a class=\"anchor\" href=\"#二-属性选择器\">#</a> 二、属性选择器</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/* E[attr] 选择包含attr属性的所有e元素 */        </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        img[alt] &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            /* width: 300px; */</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            border: 1px solid pink;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        /* e[attr=\"value\"]选择attr属性为value的e元素 */        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        img[alt=\"1\"] &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            border: 3px solid skyblue;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        /* e[attr|=\"value\"]选择attr属性为以value[-]开头的e元素  */</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        img[alt|=\"em\"] &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            width: 400px;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            height: 200px;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t/* e[attr~=\"value\"]选择attr属性[多个属性值]包含value的e元素 */        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        img[elements~=\"ele\"] &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            width: 150px;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            height: 70px;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            border: 2px dashed orange;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        /* e[attr^=\"value\"]选择attr属性为以value开头的e元素 */</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        /* e[attr$=\"value\"]选择attr属性为以value结尾的e元素 */</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        /* e[attr*=\"value\"]选择attr属性任意包含value的e元素 */</pre></td></tr></table></figure><h1 id=\"三-伪元素选择器\"><a class=\"anchor\" href=\"#三-伪元素选择器\">#</a> 三、伪元素选择器</h1>\n<blockquote>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663644178749.png\" alt=\"1663644178749\" /></p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/* 选中文本 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token selector\">p::selection</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/* 选中第一个文字 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token selector\">p::first-letter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/* 选中第一行 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token selector\">p::first-line</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* 为 placeholder 加样式 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token selector\">input::-webkit-input-placeholder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aliceblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> antiquewhite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/* 动态伪类选择器:focus */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* 获取焦点 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/* 只写:focus   为全部能够获取焦点的元素加上样式 */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token selector\">input:focus</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">outline-color</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>赛季末巅峰榜变成土豪榜！大批玩家公然招募演员，演一场5W<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>search<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"四-结构伪类选择器\"><a class=\"anchor\" href=\"#四-结构伪类选择器\">#</a> 四、结构伪类选择器</h1>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1663656123702.png\" alt=\"1663656123702\" /></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">结构伪类选择器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    1.f e:first-child</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token selector\">匹配父元素的第一个子元素，并且是e元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    2.f e:last-child</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token selector\">匹配父元素的最后一个子元素，并且是e元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    3.f e:nth-child(n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token selector\">匹配父元素的第n个子元素，并且是e元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    4.f e:nth-last-child(n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token selector\">匹配父元素的倒数第n个子元素，并且是e元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    5.f e:nth-of-type(n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token selector\">在父元素同类型子元素中的第n个元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &lt;style></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        .big div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token selector\">.big div:first-of-type</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> antiquewhite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/* 倒数第 3 个盒子 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token selector\">.big div:nth-last-child(3)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/* 排除前两个盒子 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token selector\">.big div:nth-of-type(n+3)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token selector\">p:only-of-type</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> coral<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token selector\">div a:only-child</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>193<span class=\"token punctuation\">,</span> 193<span class=\"token punctuation\">,</span> 245<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/* 根元素 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>../img/91.png<span class=\"token punctuation\">)</span></span> center/cover no-repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">/* 为内容为空的标签加样式 */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         <span class=\"token selector\">:empty</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> aqua<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/* 为跳转目标加样式 */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         <span class=\"token selector\">:target</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 3px solid pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    &lt;/style></pre></td></tr></table></figure><blockquote>\n<p><strong>注意：</strong>  <code>-of-type</code>  类型<em>先</em>找 e 元素<strong>再</strong>排序。</p>\n</blockquote>\n<h1 id=\"五-长单词换行\"><a class=\"anchor\" href=\"#五-长单词换行\">#</a> 五、长单词换行</h1>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>word-wrap</td>\n<td>break-word</td>\n<td>保证单词完整性 (文章)</td>\n</tr>\n<tr>\n<td>word-break</td>\n<td>break-all</td>\n<td>不保证 (网址)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"六-圆角属性\"><a class=\"anchor\" href=\"#六-圆角属性\">#</a> 六、圆角属性</h1>\n<p><code>border-radius:</code>  水平 / 垂直</p>\n<blockquote>\n<p>​      border-radius:20px 10px/30px 10px;</p>\n</blockquote>\n",
            "tags": [
                "HTML",
                "选择器"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/HTML/%E5%B8%83%E5%B1%80%E8%A1%A5%E5%85%85/",
            "url": "https://promisemey.github.io/2022/10/06/HTML/%E5%B8%83%E5%B1%80%E8%A1%A5%E5%85%85/",
            "title": "布局补充",
            "date_published": "2022-10-06T06:04:14.000Z",
            "content_html": "<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## 五大内核</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>+ Trident  IE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+ gecko  火狐</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+ webkit  苹果&amp;谷歌</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+ blink   谷歌&amp;欧朋</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+ presto  欧朋</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>## fieldset</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+ 表单信息分组</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+ legend 分组名称</pre></td></tr></table></figure><blockquote>\n<p>精灵图优点：<br />\n减少服务器发送次数，减轻服务器压力，提高页面加载速度<br />\n文字阴影:text-shadow 可以多层叠加<br />\n 1.h-shadow  水平偏移量<br />\n 2.v-shadow  垂直偏移量<br />\n 3.blur      可选，模糊度<br />\n 4.color     可选，阴影颜色<br />\n盒子阴影:box-shadow<br />\n1.h-shadow<br />\n2.v-shadow<br />\n3.blur    模糊度<br />\n 4.spread  阴影扩大<br />\n 5.color<br />\n6.inset   内部阴影<br />\n seo：搜索引擎优化<br />\n三大标签<br />\n title,description 网页描述标签，keywords 关键词</p>\n<p>ico 图标设置：<br />\n&lt;link rel=&quot;shortcut icon&quot; href=&quot;&quot; type=&quot;image/x-icon&quot;&gt;<br />\n 版心：container,wrapper</p>\n<p>css 书写顺序：<br />\n1. 布局属性:display,position,float,clear,visibility,overflow;<br />\n2. 盒子模型 + 背景:width,height,margin,padding,border,background;<br />\n3. 文本属性:color,font,text-decoration,text-align,line-height;<br />\n4. 点缀属性:cursor,border-radius,text-shadow,box-shadow;</p>\n</blockquote>\n",
            "tags": [
                "HTML",
                "布局",
                "html"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/HTML/html%E6%A0%87%E7%AD%BE%E8%A1%A5%E5%85%85/",
            "url": "https://promisemey.github.io/2022/10/06/HTML/html%E6%A0%87%E7%AD%BE%E8%A1%A5%E5%85%85/",
            "title": "Html标签2",
            "date_published": "2022-10-06T05:50:52.000Z",
            "content_html": "<h1 id=\"day2\"><a class=\"anchor\" href=\"#day2\">#</a> DAY2</h1>\n<h2 id=\"外部引入样式表的方式面试题\"><a class=\"anchor\" href=\"#外部引入样式表的方式面试题\">#</a> 外部引入样式表的方式（面试题）</h2>\n<ol>\n<li>外链式</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 外链式 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../css/demo.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>通过下面方法</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@import url(../css/demo.css);</pre></td></tr></table></figure><ol start=\"3\">\n<li>区别\n<ul>\n<li>link 属于 XHTML    @import 属于 css 提供的方式</li>\n<li>link 方式   会在页面加载的时候  <strong>同步加载</strong>，@import  则会在页面结构加载完毕后加载样式。</li>\n<li>兼容性：@import 仅支持 ie5 以上。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">p</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token comment\">/* 复合属性连写的 font 格式：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            font:font-style font-weight font-size/line-height font-family; */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">/* font-size: 50px;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            font-family: serif;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            font-weight: 900;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            font-style: italic; */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> oblique 900 50px/10 serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> overline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">/* 文本两端对齐 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">/* text-align-last: justify; */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"day4\"><a class=\"anchor\" href=\"#day4\">#</a> day4</h1>\n<h3 id=\"块标签元素\"><a class=\"anchor\" href=\"#块标签元素\">#</a> 块标签元素</h3>\n<blockquote>\n<p>p h1-h6 hr ul ol li dl dd dt form</p>\n</blockquote>\n<ul>\n<li>支持宽高，自上而下排列</li>\n<li>不受空格影响</li>\n<li>一般用于其他标签的容器</li>\n<li>默认宽度为 100%（独占一行）。</li>\n</ul>\n<h3 id=\"行内标签元素\"><a class=\"anchor\" href=\"#行内标签元素\">#</a> 行内标签元素</h3>\n<blockquote>\n<p>span i a b strong em sub sup u label br font</p>\n</blockquote>\n<ol>\n<li>不支持宽高（宽高根据内容大小自动撑开），自左向右排列</li>\n<li>受空格影响</li>\n<li>不独占一行</li>\n</ol>\n<h3 id=\"行内块标签元素\"><a class=\"anchor\" href=\"#行内块标签元素\">#</a> 行内块标签元素</h3>\n<blockquote>\n<p>img textarea input</p>\n</blockquote>\n<ol>\n<li>支持宽高，自左向右排列</li>\n<li>受空格影响</li>\n<li>不独占一行</li>\n</ol>\n<h3 id=\"文字两边对齐\"><a class=\"anchor\" href=\"#文字两边对齐\">#</a> 文字两边对齐</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-align-last</span><span class=\"token punctuation\">:</span> justify<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"高度塌陷问题\"><a class=\"anchor\" href=\"#高度塌陷问题\">#</a> 高度塌陷问题</h1>\n<blockquote>\n<p>垂直布局的块元素中  上下的 margin 会合并  显示最大值<br />\n互相嵌套的块级元素  父子元素紧贴的 margin-top 会作用在父元素身上<br />\n导致父元素一起向下移动<br />\n解决:<br />\n1. 给父元素设置 border-top   padding-top<br />\n2. 给父元素设置 overflow:hidden<br />\n3. 转换行内块元素<br />\n 4. 设置浮动<br />\n行内元素:<br />\n1. 水平方向的 margin 和 padding 有效<br />\n 2. 垂直方向无效<br />\n结构伪类选择器<br />\n 1.e:first-child {} 匹配父元素的第一个子元素，并且是 e 元素<br />\n 2.e:last-child {}  匹配父元素的最后一个子元素，并且是 e 元素<br />\n 3.e:nth-child (n){} 匹配父元素的第 n 个子元素，并且是 e 元素<br />\n 4.e:nth-last-child (n){} 匹配父元素的倒数第 n 个子元素，并且是 e 元素<br />\n nth-of-type (n){}  在父元素同类型子元素中的第 n 个元素</p>\n</blockquote>\n<h1 id=\"清除浮动\"><a class=\"anchor\" href=\"#清除浮动\">#</a> 清除浮动</h1>\n<ol>\n<li>子元素浮动  不能撑开标准流的块级父元素</li>\n<li>不占位置</li>\n<li>需要父元素有高度  从而不影响其他网页元素布局</li>\n<li>清除浮动方法：</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.父元素设置高度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            2.额外标签法（不常用）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                2.1.在父元素内容后面添加一个块级标签</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                2.2给添加的块级元素设置clear:both</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            3.单伪元素清除（直接给标签加类）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                3.1.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                   .clearfix::after&#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                       content:'';</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                       display:block;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                       clear:both</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                   &#125;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                3.2.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                   .clearfix::after&#123;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                       content:'.';</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                       display:block;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                       clear:both;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                       /* 补充代码 在网页中看不到伪元素 */</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                       height:0;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                       visibility:hidden;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                   &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            4.双伪元素(解决margin塌陷现象)</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                4.1.</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                   .clearfix::before,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                   .clearfix::after&#123;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                       content:'';</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                       display:table;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                   &#125;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                   .clearfix::after&#123;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                       clear:both;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                   &#125;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            5.给父元素设置overflow:hidden;</pre></td></tr></table></figure>",
            "tags": [
                "HTML",
                "基本标签",
                "html"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/06/HTML/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/",
            "url": "https://promisemey.github.io/2022/10/06/HTML/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/",
            "title": "Html的基本标签",
            "date_published": "2022-10-06T03:05:09.000Z",
            "content_html": "<h1 id=\"标签\"><a class=\"anchor\" href=\"#标签\">#</a> 标签</h1>\n<h2 id=\"1-标题标签\"><a class=\"anchor\" href=\"#1-标题标签\">#</a> 1. 标题标签</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>1级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>2级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>3级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>4级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>5级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span>6级标题标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-段落标签\"><a class=\"anchor\" href=\"#2-段落标签\">#</a> 2. 段落标签</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    今日头条是北京字节跳动科技有限公司开发的一款基于数据挖掘的推荐引擎产品，为用户推荐信息、提供连接 人与信息的服务的产品。由张一鸣于2012年3月创建，2012年8月发布第一个版本。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p><strong>注意：</strong> <em>段落 / 标题</em>   标签不能相互包括</p>\n</blockquote>\n<h2 id=\"3文本修饰标签\"><a class=\"anchor\" href=\"#3文本修饰标签\">#</a> 3. 文本修饰标签</h2>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b，strong</td>\n<td>文字加粗</td>\n</tr>\n<tr>\n<td>i，em</td>\n<td>文字倾斜</td>\n</tr>\n<tr>\n<td>del</td>\n<td>删除线</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>下标</td>\n</tr>\n<tr>\n<td>sup</td>\n<td>上标</td>\n</tr>\n<tr>\n<td>u</td>\n<td>下划线</td>\n</tr>\n<tr>\n<td>br</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>hr</td>\n<td>水平线</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 文本修饰标签 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 加粗 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>加粗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>加粗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- 倾斜 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span>倾斜<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>倾斜<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 删除 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- 上下标 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>X<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sub</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sub</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sup</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sup</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!-- 下划线 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span>下划线<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>文本修饰符<strong>被</strong>浏览器<strong>解析</strong>为文字</p>\n</blockquote>\n<h2 id=\"4-图片\"><a class=\"anchor\" href=\"#4-图片\">#</a> 4. 图片</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 图片 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../img/壁纸1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>壁纸<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>壁纸<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://img2.baidu.com/it/u=3774660051,2415734395&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=709<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>壁纸<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>壁纸<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"img\"><a class=\"anchor\" href=\"#img\">#</a> img</h3>\n<blockquote>\n<p>src:</p>\n<ul>\n<li>绝对路径</li>\n<li>相对路径</li>\n</ul>\n<p>**../ ** 上层目录</p>\n<p><strong>./</strong>  当前目录</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>图片链接地址</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>图片损坏或不存在 显示<em>属性值</em>的提示文本</td>\n</tr>\n<tr>\n<td>title</td>\n<td>鼠标悬停显示属性值</td>\n</tr>\n<tr>\n<td>width</td>\n<td>图片宽度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5-超链接\"><a class=\"anchor\" href=\"#5-超链接\">#</a> 5. 超链接</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 超链接 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.baidu.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>baidu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>baidu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>**target:  **</p>\n<ul>\n<li><code>_blank:</code>  在 <strong>新</strong> 的标签页打开链接内容</li>\n<li><code>_self:</code>  在 <strong>当前</strong> 页面打开链接内</li>\n</ul>\n<p><strong>title:</strong></p>\n<ul>\n<li>鼠标悬停显示属性值</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "HTML",
                "基本标签"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/05/js_promise/",
            "url": "https://promisemey.github.io/2022/10/05/js_promise/",
            "title": "Promise和回调地狱问题",
            "date_published": "2022-10-05T15:13:30.000Z",
            "content_html": "<p>Es6 中回调地狱等问题，以及对 async/await 的学习</p>\n<h1 id=\"宏任务和微任务\"><a class=\"anchor\" href=\"#宏任务和微任务\">#</a> 宏任务和微任务</h1>\n<blockquote>\n<p>异步任务又分为 <strong>宏任务</strong> 和 <strong>微任务</strong></p>\n</blockquote>\n<h2 id=\"1宏任务-macrotask\"><a class=\"anchor\" href=\"#1宏任务-macrotask\">#</a> 1. 宏任务 (macrotask)</h2>\n<ul>\n<li>异步 Ajax 请求</li>\n<li><code>setTImeout</code> 、 <code>setInterval</code></li>\n<li>文件操作</li>\n<li>其他宏任务</li>\n</ul>\n<h2 id=\"2微任务\"><a class=\"anchor\" href=\"#2微任务\">#</a> 2. 微任务</h2>\n<ul>\n<li><code>Promise.then</code> 、 <code>.catch</code> 、 <code>.finally</code></li>\n<li><code>process.nextTick</code></li>\n<li>其它微任务</li>\n</ul>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892917215.png\" alt=\"1650892917215\" /></p>\n<h2 id=\"3执行顺序\"><a class=\"anchor\" href=\"#3执行顺序\">#</a> 3. 执行顺序</h2>\n<blockquote>\n<p>每个宏任务执行完毕之后，会去检查是否有微任务，如果有则会执行完<strong>所有微任务</strong>，然后再去执行下一个宏任务</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 执行结果  2  4  3  1</span></pre></td></tr></table></figure><blockquote>\n<p>例题 2</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宏任务 执行 读取时间可能为 >4ms 8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宏任务 执行 7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务  执行 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 宏任务 立即执行 延迟可能 (延迟>=1ms || 延迟 & lt;5ms)      6  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务  执行 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 微任务   执行 5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务  执行 4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 执行结果   A D 2 4 3 1 B C</span></pre></td></tr></table></figure><blockquote>\n<p>例题 3</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 宏任务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 宏任务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 1 5 6 2 3 4 7 8 9</span></pre></td></tr></table></figure><h2 id=\"eventloop\"><a class=\"anchor\" href=\"#eventloop\">#</a>  <code>EventLoop</code></h2>\n<ol>\n<li><code>javascript</code>  是单线程语言</li>\n<li>同步任务和异步任务\n<ul>\n<li>同步任务 (synchronous)\n<ul>\n<li>非耗时任务，指的是在主线程上排队执行的那些任务</li>\n<li>只有前一个执行完毕，才能执行后一个任务</li>\n</ul>\n</li>\n<li>异步任务 (asynchronous)\n<ul>\n<li>耗时任务，异步任务由  <code>Javascript</code>  委托给宿主环境进行执行</li>\n<li>异步任务执行完毕后，会通知  <code>Javascript</code>  主线程执行异步任务的回调函数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>同步任务和异步任务的执行过程</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892115885.png\" alt=\"1650892115885\" /></p>\n<ol start=\"4\">\n<li>\n<p>分析例题</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 执行结果   A D C B</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"垃圾回收机制\"><a class=\"anchor\" href=\"#垃圾回收机制\">#</a> 垃圾回收机制</h2>\n<ol>\n<li>引用计数法</li>\n<li>标记清除法</li>\n</ol>\n<h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<blockquote>\n<p>简单理解：闭包 = 内层函数 + 外层变量</p>\n</blockquote>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<blockquote>\n<p>封闭数据，提供操作，外部也可以访问到函数内部变量</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 常见闭包</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">clo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">clo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 常见闭包 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">clos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'闭包'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">clos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 常见闭包 3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'闭包3'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> c</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"作用二\"><a class=\"anchor\" href=\"#作用二\">#</a> 作用二</h3>\n<blockquote>\n<p>实现数据的私有</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统计函数被调用次数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      num<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">函数被调用了</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 变量会被修改</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 闭包的形式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">countClos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">let</span> counts <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        counts<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">函数被调用了</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>counts<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> closureFn <span class=\"token operator\">=</span> <span class=\"token function\">countClos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">closureFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>可能引起的问题？</p>\n<p>内存泄漏、</p>\n</blockquote>\n<h1 id=\"es6\"><a class=\"anchor\" href=\"#es6\">#</a> ES6</h1>\n<h2 id=\"剩余参数\"><a class=\"anchor\" href=\"#剩余参数\">#</a> 剩余参数</h2>\n<ol>\n<li>语法   <code>...other</code>   置于最末形参，用于获取多余实参</li>\n<li>获取的是一个<strong>真数组</strong></li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 1 2 4  [5, 6, 7, 8, 'asd']</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'asd'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"展开运算符\"><a class=\"anchor\" href=\"#展开运算符\">#</a> 展开运算符</h2>\n<ol>\n<li>语法  <code>...</code></li>\n<li>不会改变原来的数组</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> uname <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'戚金铭'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'杨辉'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张健'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'赵云'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'黄忠'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'关羽'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'张飞'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'马超'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'刘备'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'曹操'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 戚金铭 杨辉 张健 赵云 黄忠 关羽 张飞 马超 刘备 曹操</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>uname<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1 23 4 5 6 4 3 2 11</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 主要用途  合并数组，求最大值 最小值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 最大值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 最小值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 合并数组  不会改变 原数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// [' 戚金铭 ', ' 杨辉 ', ' 张健 ', ' 赵云 ', ' 黄忠 ', ' 关羽 ', ' 张飞 ', ' 马超 ', ' 刘备 ', ' 曹操 ', 1, 23, 4, 5, 6, 4, 3, 2, 11]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>uname<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"箭头函数\"><a class=\"anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<ol>\n<li>语法</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>只有一个形参时，可以省略括号</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>函数执行语句只有一条时，可以省略 <code>return</code>  和花括号</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> x</pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p>可以直接返回一个对象</p>\n<blockquote>\n<p>加括号的函数体 返回对象的字面量表达式</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">uname</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> uname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//&#123;uname: 'pink'&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>箭头函数没有 arguments 动态参数对象</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 箭头函数 求和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> sum</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>this</code>  指向</li>\n</ol>\n<blockquote>\n<p>箭头函数没有自己的 this，他只会从自己的作用域链的上一层沿用  <code>this</code></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// window</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    obj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">count</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// obj2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    obj2<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"数组解构\"><a class=\"anchor\" href=\"#数组解构\">#</a> 数组解构</h2>\n<blockquote>\n<p>将数组的单元值快速批量的赋值给一系列变量的简洁语法</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 必须加分号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 交换变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>必须加分号的两种情况</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 必须加分号的两种情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 立即执行函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 数组解构</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// arr.map(item => console.log(item))</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 必须加分号  否则 \"apple\"[(1 , 2 , 3)].map is not a function</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------练习---------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'海尔'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'联想'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'小米'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'方正'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 将其结构变量为  hr lx mi fz</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>hr<span class=\"token punctuation\">,</span> lx<span class=\"token punctuation\">,</span> mi<span class=\"token punctuation\">,</span> fz<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">,</span> lx<span class=\"token punctuation\">,</span> mi<span class=\"token punctuation\">,</span> fz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 请将最大值和最小值函数返回值解构 max 和 min 两个变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>一些小细节</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'海尔'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'联想'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'小米'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'方正'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 变量多于参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 海尔 联想 小米 方正 undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 2. 参数多于变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// const [x, y] = pc</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//console.log (x, y) // 海尔 联想</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 3. 剩余参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// const [x, y, ...z] = pc</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//console.log (x, y, z) // 海尔 联想 [' 小米 ', ' 方正 '] 真数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 4. 默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// const [x = 0, y = 0, z, i, j = 0] = pc</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//console.log (z, j) // 小米 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 5. 按需导入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>z<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pc</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 海尔 [' 小米 ', ' 方正 ']</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 多维数组 解构</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">const</span> px <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'海尔'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'联想'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小米'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'方正'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 海尔 联想 小米 方正</span></pre></td></tr></table></figure><h2 id=\"对象解构\"><a class=\"anchor\" href=\"#对象解构\">#</a> 对象解构</h2>\n<blockquote>\n<p>将对象的属性和方法快速批量的赋值给一系列的变量</p>\n<p><strong>注意：</strong> 解构的变量名 <strong>必须</strong> 和属性名或方法名一致</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token literal-property property\">stuId</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'欧阳霸天'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">salary</span><span class=\"token operator\">:</span> <span class=\"token string\">'20000'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'上海'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> stuId<span class=\"token punctuation\">,</span> uname<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> city <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 相当于 => stuId = obj.stuId</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 1001 ' 欧阳霸天 ' 19 ' 男 ' '20000' ' 上海'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stuId<span class=\"token punctuation\">,</span> uname<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 解构变量名  重命名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">stuId</span><span class=\"token operator\">:</span> stu_id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> username <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu_id<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>解构数组对象</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解构数组对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">stuId</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'欧阳霸天'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">stuId</span><span class=\"token operator\">:</span> stu_id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> username <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>多级解构</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 多级解构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> pig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'佩奇'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">father</span><span class=\"token operator\">:</span> <span class=\"token string\">'猪爸爸'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span> <span class=\"token string\">'猪妈妈'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">brother</span><span class=\"token operator\">:</span> <span class=\"token string\">'乔治'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> father<span class=\"token punctuation\">,</span> mother<span class=\"token punctuation\">,</span> brother <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> pig</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 猪爸爸</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数  首字母大写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> pig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pig'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> rabbit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 方法放在构造函数里面，在我们每次创建实例的时候，都会为我们的方法单独开辟一个内存空间</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">/* this.sing = function () &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                console.log (' 沈园外 ');</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &#125; */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 一般情况下 我们的公共属性定义在构造函数内部 公共的方法我们放在原型函数上</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 原形函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'沈园外'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">var</span> zxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张学友'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        ldh<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        zxy<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"new实例化执行过程\"><a class=\"anchor\" href=\"#new实例化执行过程\">#</a>  <code>new</code>  实例化执行过程</h3>\n<ul>\n<li>创建一个新对象</li>\n<li>构造函数的 this 指向新对象</li>\n<li>执行构造函数的代码，修改 this，添加新属性</li>\n<li>返回新对象</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Person<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 实例对象  通过构造函数创建的对象 叫实例对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 实例成员  实例对象里面的方法和属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 静态成员  构造函数里面的方法和属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> lang <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// Object 的静态方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Object.keys (lang)   获取对象的所有键</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// ['name', 'age', 'gender']</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// Object.valuess (lang)   获取对象的所有值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//['json', 18, ' 男 ']</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 对象拷贝</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// assign</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">song</span><span class=\"token operator\">:</span> <span class=\"token string\">'冰雨'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"reduce-方法\"><a class=\"anchor\" href=\"#reduce-方法\">#</a>  <code>reduce</code>  方法</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 主要用于  求和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//arr.reduce (function (累计值，当前值 [, 索引，原数组]) &#123; &#125;, 起始值)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// let sum = arr.reduce((prev, item) => prev + item)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// console.log(prev)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// console.log(index)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// console.log(a)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> item</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// console.log(sum)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 案例  涨薪 30%</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> money <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">salary</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token literal-property property\">salary</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token literal-property property\">salary</span><span class=\"token operator\">:</span> <span class=\"token number\">20000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">let</span> nmoney <span class=\"token operator\">=</span> money<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">*</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nmoney<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"find方法\"><a class=\"anchor\" href=\"#find方法\">#</a>  <code>find</code>  方法</h2>\n<h2 id=\"every-方法\"><a class=\"anchor\" href=\"#every-方法\">#</a>  <code>every</code>  方法</h2>\n<h2 id=\"some-方法\"><a class=\"anchor\" href=\"#some-方法\">#</a>  <code>some</code>  方法</h2>\n<h2 id=\"arrayfrom-将伪数组转换为真数组\"><a class=\"anchor\" href=\"#arrayfrom-将伪数组转换为真数组\">#</a>  <code>Array.from（）</code>  将伪数组转换为真数组</h2>\n<h1 id=\"模块化\"><a class=\"anchor\" href=\"#模块化\">#</a> 模块化</h1>\n<h2 id=\"es6模块规范\"><a class=\"anchor\" href=\"#es6模块规范\">#</a> ES6 模块规范</h2>\n<ol>\n<li>每个 js 文件是一个独立的模块</li>\n<li>导入其他模块成员使用  <code>import</code>  关键字</li>\n<li>向外共享使用  <code>export</code>  关键字</li>\n</ol>\n<h2 id=\"nodejs只用es6模块化\"><a class=\"anchor\" href=\"#nodejs只用es6模块化\">#</a> node.js 只用 es6 模块化</h2>\n<ol>\n<li>默认仅支持 CommonJS 模块化规范，需要配置使用</li>\n<li>安装 v14.15.1 + 版本的 node.js</li>\n<li>在 package.json 的根节点中添加  <code>&quot;type&quot;:&quot;module&quot;</code>  节点</li>\n</ol>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ol>\n<li>\n<p>默认导入 / 导出</p>\n<ul>\n<li>导出: <code>export default 默认导出成员</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是默认导出文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    n1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    show</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>导入: <code> import 接收名称 from '模块名称'</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ex <span class=\"token keyword\">from</span> <span class=\"token string\">'./1.默认导出.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>注意！！！</strong>  每个模块中只允许使用一次默认导出</li>\n</ul>\n</li>\n<li>\n<p>按需导出</p>\n<ul>\n<li>导出</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'ccc'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>导入</li>\n</ul>\n<ol>\n<li>可以使用 as 关键字重命名</li>\n<li>可以和默认导出一起使用</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> say <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./3.按需导出.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>say<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> info<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> say <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./3.按需导出.js'</span></pre></td></tr></table></figure></li>\n<li>\n<p>直接导入运行</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 5. 直接运行.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 6.test.js</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./5.直接运行.js'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// node 6.test.js</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h1>\n<h2 id=\"1回调地狱\"><a class=\"anchor\" href=\"#1回调地狱\">#</a> 1. 回调地狱</h2>\n<ol>\n<li>多层回调函数的相互嵌套，就形成了回调地狱。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 地狱回调</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 第一层</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'武林要以和为贵'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 第二程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'要讲武德'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 第三层</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不要搞窝里斗'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>缺点:\n<ul>\n<li>代码耦合性太强，难以维护</li>\n<li>可读性差，大量冗余代码相互嵌套</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2基本概念\"><a class=\"anchor\" href=\"#2基本概念\">#</a> 2. 基本概念</h2>\n<ol>\n<li><code>Promise</code> \t是一个构造函数\n<ul>\n<li>创建  <code>Promise</code>  实例  <code>const p =  new Promise()</code></li>\n<li>new 出来的 Promise 实例对象，代表一个异步操作</li>\n</ul>\n</li>\n<li><code>Promise.prototype</code>  上包含一个.then () 方法\n<ul>\n<li>每次 new Promise () 构造函数得到的实例对象，都可以 <em>通过原型链的方式</em>   访问   <code>.then()</code>   方法</li>\n</ul>\n</li>\n<li><code>.then()</code>   方法用来预先指定成功和失败的回调函数</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>成功<span class=\"token punctuation\">,</span>失败<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">error</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 调用.then () 方法是，成功的回调函数是必选的，失败的回调函数是可选的</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p><code>.then()</code>  方法的新特性</p>\n<ul>\n<li>node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式，因此，需要安装  <code>then-fs</code>  包</li>\n<li><code>then-fs</code>  提供  <code>readFile()</code>  方法，返回值是 Promise 对象</li>\n<li>如果上一个  <code>.then()</code>  方法中返回来了一个新的 Promise 实例对象，则可以通过下一个  <code>.then()</code>  继续进行处理.</li>\n</ul>\n<pre><code class=\"language-.js\">import thenFs from 'then-fs'\nthenFs.readFile('./file/1.txt', 'utf-8').then(r1 =&gt; &#123;\n    console.log(r1)\n    return thenFs.readFile('./file/2.txt', 'utf-8')\n&#125;).then(r2 =&gt; &#123;\n    console.log(r2)\n    return thenFs.readFile('./file/3.txt', 'utf-8')\n&#125;).then(r3 =&gt; &#123;\n    console.log(r3);\n&#125;)\n</code></pre>\n</li>\n<li>\n<p><code>.catch()</code>  捕获异常</p>\n<pre><code class=\"language-.js\">thenFs.readFile('./file/1.txt', 'utf-8').then(r1 =&gt; &#123;\n    console.log(r1)\n    return thenFs.readFile('./file/2.txt', 'utf-8')\n&#125;).then(r2 =&gt; &#123;\n    console.log(r2)\n    return thenFs.readFile('./file/3.txt', 'utf-8')\n&#125;).then(r3 =&gt; &#123;\n    console.log(r3);\n&#125;).catch(err =&gt; &#123;\n    console.log(err);\n&#125;)\n</code></pre>\n</li>\n<li>\n<p><code>.all()</code></p>\n<ul>\n<li><code>Promise.all()</code>  方法会发起并行的  <code>Promise</code>  异步操作，等所有的异步操作全部结束后才会执行下一步的  <code>.then()</code>  操作 (等待机制)</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存放三个度文件的异步操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promiseArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 将 Promise 的数组，作为 Promise.all () 的参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 所有文件读取成功 (等待机制)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Promise.race()</code></p>\n<ul>\n<li>也是会发起并行的  <code>Promise</code>  异步操作，只要有任何一个一部操作完成，就立即执行下一步的  <code>.then()</code>  操作 (赛跑机制)</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 所有文件读取成功 (等待机制)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于 Promise 封装文件读取函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//resolve 形参：调用 getfile 方法时，通过 .then () 指定的 成功的 回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//reject  形参：调用 getfile 方法时，通过 .then () 指定的 失败的 回调函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>fPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> dataStr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dataStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"asyncawait\"><a class=\"anchor\" href=\"#asyncawait\">#</a> async/await</h2>\n<ol>\n<li>第一个  <code>await</code>  之前的代码会<strong>同步</strong>执行， <code>await</code>  之后的代码<strong>异步</strong>执行</li>\n<li>如果调用的某个方法的返回值是 Promise 对象，则前面可以添加 await，await 只能用在被 async 修饰的方法中</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'then-fs'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> r2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> r3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/** 执行结果</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * a </pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * c</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * b</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * d</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * e</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * 我是 111 我是 222 我是 333</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * f</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript",
                "Js高级",
                "js"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "url": "https://promisemey.github.io/2022/10/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2022-10-05T15:13:30.000Z",
            "content_html": "<p>Es6 中回调地狱等问题，以及对 async/await 的学习</p>\n<h1 id=\"模块化\"><a class=\"anchor\" href=\"#模块化\">#</a> 模块化</h1>\n<h2 id=\"es6模块规范\"><a class=\"anchor\" href=\"#es6模块规范\">#</a> ES6 模块规范</h2>\n<ol>\n<li>每个 js 文件是一个独立的模块</li>\n<li>导入其他模块成员使用  <code>import</code>  关键字</li>\n<li>向外共享使用  <code>export</code>  关键字</li>\n</ol>\n<h2 id=\"nodejs只用es6模块化\"><a class=\"anchor\" href=\"#nodejs只用es6模块化\">#</a> node.js 只用 es6 模块化</h2>\n<ol>\n<li>默认仅支持 CommonJS 模块化规范，需要配置使用</li>\n<li>安装 v14.15.1 + 版本的 node.js</li>\n<li>在 package.json 的根节点中添加  <code>&quot;type&quot;:&quot;module&quot;</code>  节点</li>\n</ol>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ol>\n<li>\n<p>默认导入 / 导出</p>\n<ul>\n<li>导出: <code>export default 默认导出成员</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是默认导出文件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    n1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    show</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>导入: <code> import 接收名称 from '模块名称'</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ex <span class=\"token keyword\">from</span> <span class=\"token string\">'./1.默认导出.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>注意！！！</strong>  每个模块中只允许使用一次默认导出</li>\n</ul>\n</li>\n<li>\n<p>按需导出</p>\n<ul>\n<li>导出</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'aaa'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'ccc'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>导入</li>\n</ul>\n<ol>\n<li>可以使用 as 关键字重命名</li>\n<li>可以和默认导出一起使用</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> say <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./3.按需导出.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>say<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> info<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> say <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./3.按需导出.js'</span></pre></td></tr></table></figure></li>\n<li>\n<p>直接导入运行</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 5. 直接运行.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 6.test.js</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./5.直接运行.js'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// node 6.test.js</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h1>\n<h2 id=\"1回调地狱\"><a class=\"anchor\" href=\"#1回调地狱\">#</a> 1. 回调地狱</h2>\n<ol>\n<li>多层回调函数的相互嵌套，就形成了回调地狱。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 地狱回调</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 第一层</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'武林要以和为贵'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 第二程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'要讲武德'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 第三层</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不要搞窝里斗'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>缺点:\n<ul>\n<li>代码耦合性太强，难以维护</li>\n<li>可读性差，大量冗余代码相互嵌套</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2基本概念\"><a class=\"anchor\" href=\"#2基本概念\">#</a> 2. 基本概念</h2>\n<ol>\n<li><code>Promise</code> \t是一个构造函数\n<ul>\n<li>创建  <code>Promise</code>  实例  <code>const p =  new Promise()</code></li>\n<li>new 出来的 Promise 实例对象，代表一个异步操作</li>\n</ul>\n</li>\n<li><code>Promise.prototype</code>  上包含一个.then () 方法\n<ul>\n<li>每次 new Promise () 构造函数得到的实例对象，都可以 <em>通过原型链的方式</em>   访问   <code>.then()</code>   方法</li>\n</ul>\n</li>\n<li><code>.then()</code>   方法用来预先指定成功和失败的回调函数</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>成功<span class=\"token punctuation\">,</span>失败<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">error</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 调用.then () 方法是，成功的回调函数是必选的，失败的回调函数是可选的</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p><code>.then()</code>  方法的新特性</p>\n<ul>\n<li>node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式，因此，需要安装  <code>then-fs</code>  包</li>\n<li><code>then-fs</code>  提供  <code>readFile()</code>  方法，返回值是 Promise 对象</li>\n<li>如果上一个  <code>.then()</code>  方法中返回来了一个新的 Promise 实例对象，则可以通过下一个  <code>.then()</code>  继续进行处理.</li>\n</ul>\n<pre><code class=\"language-.js\">import thenFs from 'then-fs'\nthenFs.readFile('./file/1.txt', 'utf-8').then(r1 =&gt; &#123;\n    console.log(r1)\n    return thenFs.readFile('./file/2.txt', 'utf-8')\n&#125;).then(r2 =&gt; &#123;\n    console.log(r2)\n    return thenFs.readFile('./file/3.txt', 'utf-8')\n&#125;).then(r3 =&gt; &#123;\n    console.log(r3);\n&#125;)\n</code></pre>\n</li>\n<li>\n<p><code>.catch()</code>  捕获异常</p>\n<pre><code class=\"language-.js\">thenFs.readFile('./file/1.txt', 'utf-8').then(r1 =&gt; &#123;\n    console.log(r1)\n    return thenFs.readFile('./file/2.txt', 'utf-8')\n&#125;).then(r2 =&gt; &#123;\n    console.log(r2)\n    return thenFs.readFile('./file/3.txt', 'utf-8')\n&#125;).then(r3 =&gt; &#123;\n    console.log(r3);\n&#125;).catch(err =&gt; &#123;\n    console.log(err);\n&#125;)\n</code></pre>\n</li>\n<li>\n<p><code>.all()</code></p>\n<ul>\n<li><code>Promise.all()</code>  方法会发起并行的  <code>Promise</code>  异步操作，等所有的异步操作全部结束后才会执行下一步的  <code>.then()</code>  操作 (等待机制)</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存放三个度文件的异步操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> promiseArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    thenFs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 将 Promise 的数组，作为 Promise.all () 的参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 所有文件读取成功 (等待机制)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Promise.race()</code></p>\n<ul>\n<li>也是会发起并行的  <code>Promise</code>  异步操作，只要有任何一个一部操作完成，就立即执行下一步的  <code>.then()</code>  操作 (赛跑机制)</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 所有文件读取成功 (等待机制)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于 Promise 封装文件读取函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//resolve 形参：调用 getfile 方法时，通过 .then () 指定的 成功的 回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//reject  形参：调用 getfile 方法时，通过 .then () 指定的 失败的 回调函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>fPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> dataStr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dataStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"asyncawait\"><a class=\"anchor\" href=\"#asyncawait\">#</a> async/await</h1>\n<ol>\n<li>第一个  <code>await</code>  之前的代码会<strong>同步</strong>执行， <code>await</code>  之后的代码<strong>异步</strong>执行</li>\n<li>如果调用的某个方法的返回值是 Promise 对象，则前面可以添加 await，await 只能用在被 async 修饰的方法中</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'then-fs'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> r2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> r3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/** 执行结果</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * a </pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * c</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * b</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * d</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * e</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * 我是 111 我是 222 我是 333</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * f</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr></table></figure><h1 id=\"eventloop\"><a class=\"anchor\" href=\"#eventloop\">#</a>  <code>EventLoop</code></h1>\n<ol>\n<li><code>javascript</code>  是单线程语言</li>\n<li>同步任务和异步任务\n<ul>\n<li>同步任务 (synchronous)\n<ul>\n<li>非耗时任务，指的是在主线程上排队执行的那些任务</li>\n<li>只有前一个执行完毕，才能执行后一个任务</li>\n</ul>\n</li>\n<li>异步任务 (asynchronous)\n<ul>\n<li>耗时任务，异步任务由  <code>Javascript</code>  委托给宿主环境进行执行</li>\n<li>异步任务执行完毕后，会通知  <code>Javascript</code>  主线程执行异步任务的回调函数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>同步任务和异步任务的执行过程</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892115885.png\" alt=\"1650892115885\" /></p>\n<ol start=\"4\">\n<li>\n<p>分析例题</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 执行结果   A D C B</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"宏任务和微任务\"><a class=\"anchor\" href=\"#宏任务和微任务\">#</a> 宏任务和微任务</h1>\n<blockquote>\n<p>异步任务又分为 <strong>宏任务</strong> 和 <strong>微任务</strong></p>\n</blockquote>\n<h2 id=\"1宏任务-macrotask\"><a class=\"anchor\" href=\"#1宏任务-macrotask\">#</a> 1. 宏任务 (macrotask)</h2>\n<ul>\n<li>异步 Ajax 请求</li>\n<li><code>setTImeout</code> 、 <code>setInterval</code></li>\n<li>文件操作</li>\n<li>其他宏任务</li>\n</ul>\n<h2 id=\"2微任务\"><a class=\"anchor\" href=\"#2微任务\">#</a> 2. 微任务</h2>\n<ul>\n<li><code>Promise.then</code> 、 <code>.catch</code> 、 <code>.finally</code></li>\n<li><code>process.nextTick</code></li>\n<li>其它微任务</li>\n</ul>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892917215.png\" alt=\"1650892917215\" /></p>\n<h2 id=\"3执行顺序\"><a class=\"anchor\" href=\"#3执行顺序\">#</a> 3. 执行顺序</h2>\n<blockquote>\n<p>每个宏任务执行完毕之后，会去检查是否有微任务，如果有则会执行完<strong>所有微任务</strong>，然后再去执行下一个宏任务</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 执行结果  2  4  3  1</span></pre></td></tr></table></figure><blockquote>\n<p>例题 2</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./file/1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宏任务 执行 读取时间可能为 >4ms 8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宏任务 执行 7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务  执行 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 宏任务 立即执行 延迟可能 (延迟>=1ms || 延迟 & lt;5ms)      6  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务  执行 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 微任务   执行 5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务  执行 4</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 执行结果   A D 2 4 3 1 B C</span></pre></td></tr></table></figure><blockquote>\n<p>例题 3</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 宏任务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 宏任务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步任务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微任务</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 1 5 6 2 3 4 7 8 9</span></pre></td></tr></table></figure><h1 id=\"api接口\"><a class=\"anchor\" href=\"#api接口\">#</a> Api 接口</h1>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/05/hello-world/",
            "url": "https://promisemey.github.io/2022/10/05/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-05T12:15:34.778Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}