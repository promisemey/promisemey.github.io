{
    "version": "https://jsonfeed.org/version/1",
    "title": "Promise是恁爹",
    "description": "",
    "home_page_url": "https://promisemey.github.io",
    "items": [
        {
            "id": "https://promisemey.github.io/2022/10/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "url": "https://promisemey.github.io/2022/10/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/",
            "title": "置顶文章",
            "date_published": "2022-10-05T15:13:30.000Z",
            "content_html": "<p>Es6 中回调地狱等问题，以及对 async/await 的学习</p>\n<h1 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\">#</a> 模块化</h1>\n<h2 id=\"es6模块规范\"><a class=\"markdownIt-Anchor\" href=\"#es6模块规范\">#</a> ES6 模块规范</h2>\n<ol>\n<li>每个 js 文件是一个独立的模块</li>\n<li>导入其他模块成员使用  <code>import</code>  关键字</li>\n<li>向外共享使用  <code>export</code>  关键字</li>\n</ol>\n<h2 id=\"nodejs只用es6模块化\"><a class=\"markdownIt-Anchor\" href=\"#nodejs只用es6模块化\">#</a> node.js 只用 es6 模块化</h2>\n<ol>\n<li>默认仅支持 CommonJS 模块化规范，需要配置使用</li>\n<li>安装 v14.15.1 + 版本的 node.js</li>\n<li>在 package.json 的根节点中添加  <code>&quot;type&quot;:&quot;module&quot;</code>  节点</li>\n</ol>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ol>\n<li>\n<p>默认导入 / 导出</p>\n<ul>\n<li>导出: <code>export default 默认导出成员</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是默认导出文件&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    n1,</span><br><span class=\"line\">    show</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入: <code> import 接收名称 from '模块名称'</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./1.默认导出.js&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ex.<span class=\"property\">show</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>注意！！！</strong>  每个模块中只允许使用一次默认导出</li>\n</ul>\n</li>\n<li>\n<p>按需导出</p>\n<ul>\n<li>导出</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> s1 = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> s2 = <span class=\"string\">&#x27;ccc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入</li>\n</ul>\n<ol>\n<li>可以使用 as 关键字重命名</li>\n<li>可以和默认导出一起使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; s1, s2, say &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./3.按需导出.js&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(say);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> info, &#123; s1, s2, say &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./3.按需导出.js&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>直接导入运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.直接运行.js</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 6.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./5.直接运行.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// node 6.test.js</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h1>\n<h2 id=\"1回调地狱\"><a class=\"markdownIt-Anchor\" href=\"#1回调地狱\">#</a> 1. 回调地狱</h2>\n<ol>\n<li>多层回调函数的相互嵌套，就形成了回调地狱。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//地狱回调</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;  <span class=\"comment\">//第一层</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;武林要以和为贵&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;  <span class=\"comment\">//第二程</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;要讲武德&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;   <span class=\"comment\">//第三层</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;不要搞窝里斗&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>缺点:\n<ul>\n<li>代码耦合性太强，难以维护</li>\n<li>可读性差，大量冗余代码相互嵌套</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2基本概念\"><a class=\"markdownIt-Anchor\" href=\"#2基本概念\">#</a> 2. 基本概念</h2>\n<ol>\n<li><code>Promise</code> \t是一个构造函数\n<ul>\n<li>创建  <code>Promise</code>  实例  <code>const p =  new Promise()</code></li>\n<li>new 出来的 Promise 实例对象，代表一个异步操作</li>\n</ul>\n</li>\n<li><code>Promise.prototype</code>  上包含一个.then () 方法\n<ul>\n<li>每次 new Promise () 构造函数得到的实例对象，都可以 <em>通过原型链的方式</em>   访问   <code>.then()</code>   方法</li>\n</ul>\n</li>\n<li><code>.then()</code>   方法用来预先指定成功和失败的回调函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"title function_\">then</span>(成功,失败)</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span>=&gt;</span>(),<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>())</span><br><span class=\"line\"><span class=\"comment\">// 调用.then()方法是,成功的回调函数是必选的,失败的回调函数是可选的</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>\n<p><code>.then()</code>  方法的新特性</p>\n<ul>\n<li>node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式，因此，需要安装  <code>then-fs</code>  包</li>\n<li><code>then-fs</code>  提供  <code>readFile()</code>  方法，返回值是 Promise 对象</li>\n<li>如果上一个  <code>.then()</code>  方法中返回来了一个新的 Promise 实例对象，则可以通过下一个  <code>.then()</code>  继续进行处理.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import thenFs from &#x27;then-fs&#x27;</span><br><span class=\"line\">thenFs.readFile(&#x27;./file/1.txt&#x27;, &#x27;utf-8&#x27;).then(r1 =&gt; &#123;</span><br><span class=\"line\">    console.log(r1)</span><br><span class=\"line\">    return thenFs.readFile(&#x27;./file/2.txt&#x27;, &#x27;utf-8&#x27;)</span><br><span class=\"line\">&#125;).then(r2 =&gt; &#123;</span><br><span class=\"line\">    console.log(r2)</span><br><span class=\"line\">    return thenFs.readFile(&#x27;./file/3.txt&#x27;, &#x27;utf-8&#x27;)</span><br><span class=\"line\">&#125;).then(r3 =&gt; &#123;</span><br><span class=\"line\">    console.log(r3);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>.catch()</code>  捕获异常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thenFs.readFile(&#x27;./file/1.txt&#x27;, &#x27;utf-8&#x27;).then(r1 =&gt; &#123;</span><br><span class=\"line\">    console.log(r1)</span><br><span class=\"line\">    return thenFs.readFile(&#x27;./file/2.txt&#x27;, &#x27;utf-8&#x27;)</span><br><span class=\"line\">&#125;).then(r2 =&gt; &#123;</span><br><span class=\"line\">    console.log(r2)</span><br><span class=\"line\">    return thenFs.readFile(&#x27;./file/3.txt&#x27;, &#x27;utf-8&#x27;)</span><br><span class=\"line\">&#125;).then(r3 =&gt; &#123;</span><br><span class=\"line\">    console.log(r3);</span><br><span class=\"line\">&#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>.all()</code></p>\n<ul>\n<li><code>Promise.all()</code>  方法会发起并行的  <code>Promise</code>  异步操作，等所有的异步操作全部结束后才会执行下一步的  <code>.then()</code>  操作 (等待机制)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存放三个度文件的异步操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseArr = [</span><br><span class=\"line\">    thenFs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">    thenFs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">    thenFs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Promise 的数组，作为 Promise.all() 的参数</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promiseArr)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">[r1, r2, r3]</span>) =&gt;</span> &#123; <span class=\"comment\">// 所有文件读取成功(等待机制)</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1, r2, r3);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>Promise.race()</code></p>\n<ul>\n<li>也是会发起并行的  <code>Promise</code>  异步操作，只要有任何一个一部操作完成，就立即执行下一步的  <code>.then()</code>  操作 (赛跑机制)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>(promiseArr)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">rs</span>) =&gt;</span> &#123; <span class=\"comment\">// 所有文件读取成功(等待机制)</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>基于 Promise 封装文件读取函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getfile</span>(<span class=\"params\">fPath</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// resolve 形参:  调用getfile方法时,通过 .then()指定的 成功的 回调函数</span></span><br><span class=\"line\">    <span class=\"comment\">// reject  形参:  调用getfile方法时,通过 .then()指定的 失败的 回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">readFile</span>(fPath, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(err.<span class=\"property\">message</span>)</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(dataStr)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getfile</span>(<span class=\"string\">&#x27;./file/2.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rs) &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err) &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"asyncawait\"><a class=\"markdownIt-Anchor\" href=\"#asyncawait\">#</a> async/await</h1>\n<ol>\n<li>第一个  <code>await</code>  之前的代码会<strong>同步</strong>执行， <code>await</code>  之后的代码<strong>异步</strong>执行</li>\n<li>如果调用的某个方法的返回值是 Promise 对象，则前面可以添加 await，await 只能用在被 async 修饰的方法中</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getfile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r3 = <span class=\"keyword\">await</span> fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1, r2, r3);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">getfile</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;d&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 执行结果</span></span><br><span class=\"line\"><span class=\"comment\"> * a </span></span><br><span class=\"line\"><span class=\"comment\"> * c</span></span><br><span class=\"line\"><span class=\"comment\"> * b</span></span><br><span class=\"line\"><span class=\"comment\"> * d</span></span><br><span class=\"line\"><span class=\"comment\"> * e</span></span><br><span class=\"line\"><span class=\"comment\"> * 我是111 我是222 我是333</span></span><br><span class=\"line\"><span class=\"comment\"> * f</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"eventloop\"><a class=\"markdownIt-Anchor\" href=\"#eventloop\">#</a>  <code>EventLoop</code></h1>\n<ol>\n<li><code>javascript</code>  是单线程语言</li>\n<li>同步任务和异步任务\n<ul>\n<li>同步任务 (synchronous)\n<ul>\n<li>非耗时任务，指的是在主线程上排队执行的那些任务</li>\n<li>只有前一个执行完毕，才能执行后一个任务</li>\n</ul>\n</li>\n<li>异步任务 (asynchronous)\n<ul>\n<li>耗时任务，异步任务由  <code>Javascript</code>  委托给宿主环境进行执行</li>\n<li>异步任务执行完毕后，会通知  <code>Javascript</code>  主线程执行异步任务的回调函数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>同步任务和异步任务的执行过程</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892115885.png\" alt=\"1650892115885\"></p>\n<ol start=\"4\">\n<li>\n<p>分析例题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 执行结果   A D C B</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"宏任务和微任务\"><a class=\"markdownIt-Anchor\" href=\"#宏任务和微任务\">#</a> 宏任务和微任务</h1>\n<blockquote>\n<p>异步任务又分为 <strong>宏任务</strong> 和 <strong>微任务</strong></p>\n</blockquote>\n<h2 id=\"1宏任务-macrotask\"><a class=\"markdownIt-Anchor\" href=\"#1宏任务-macrotask\">#</a> 1. 宏任务 (macrotask)</h2>\n<ul>\n<li>异步 Ajax 请求</li>\n<li><code>setTImeout</code> 、 <code>setInterval</code></li>\n<li>文件操作</li>\n<li>其他宏任务</li>\n</ul>\n<h2 id=\"2微任务\"><a class=\"markdownIt-Anchor\" href=\"#2微任务\">#</a> 2. 微任务</h2>\n<ul>\n<li><code>Promise.then</code> 、 <code>.catch</code> 、 <code>.finally</code></li>\n<li><code>process.nextTick</code></li>\n<li>其它微任务</li>\n</ul>\n<p><img data-src=\"C:%5CUsers%5C26366%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1650892917215.png\" alt=\"1650892917215\"></p>\n<h2 id=\"3执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#3执行顺序\">#</a> 3. 执行顺序</h2>\n<blockquote>\n<p>每个宏任务执行完毕之后，会去检查是否有微任务，如果有则会执行完<strong>所有微任务</strong>，然后再去执行下一个宏任务</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果  2  4  3  1 </span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例题 2</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./file/1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B&#x27;</span>); <span class=\"comment\">// 宏任务 执行 读取时间可能为 &gt;4ms 8</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;C&#x27;</span>); <span class=\"comment\">// 宏任务 执行 7</span></span><br><span class=\"line\">&#125;, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D&#x27;</span>); <span class=\"comment\">// 同步任务  执行 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 宏任务 立即执行 延迟可能(延迟&gt;=1ms || 延迟&lt;5ms)      6  </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 同步任务  执行 3</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>) <span class=\"comment\">// 微任务   执行 5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>) <span class=\"comment\">// 同步任务  执行 4</span></span><br><span class=\"line\"><span class=\"comment\">// 执行结果   A D 2 4 3 1 B C</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例题 3</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 宏任务</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 宏任务</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>); <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>); <span class=\"comment\">// 同步任务</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">9</span>); <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 5 6 2 3 4 7 8 9</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"api接口\"><a class=\"markdownIt-Anchor\" href=\"#api接口\">#</a> Api 接口</h1>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "https://promisemey.github.io/2022/10/05/hello-world/",
            "url": "https://promisemey.github.io/2022/10/05/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-05T12:15:34.778Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}